### YamlMime:TSType
name: ParticipantsButtonProps
uid: '@azure/communication-react.ParticipantsButtonProps'
package: '@azure/communication-react'
summary: Props for ParticipantsButton component
fullName: ParticipantsButtonProps
remarks: ''
isPreview: false
isDeprecated: false
type: interface
properties:
  - name: about
    uid: '@azure/communication-react.ParticipantsButtonProps.about'
    package: '@azure/communication-react'
    summary: ''
    fullName: about
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'about?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: accept
    uid: '@azure/communication-react.ParticipantsButtonProps.accept'
    package: '@azure/communication-react'
    summary: ''
    fullName: accept
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accept?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: acceptCharset
    uid: '@azure/communication-react.ParticipantsButtonProps.acceptCharset'
    package: '@azure/communication-react'
    summary: ''
    fullName: acceptCharset
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'acceptCharset?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: accessKey
    uid: '@azure/communication-react.ParticipantsButtonProps.accessKey'
    package: '@azure/communication-react'
    summary: ''
    fullName: accessKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'accessKey?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: action
    uid: '@azure/communication-react.ParticipantsButtonProps.action'
    package: '@azure/communication-react'
    summary: ''
    fullName: action
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'action?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: allowDisabledFocus
    uid: '@azure/communication-react.ParticipantsButtonProps.allowDisabledFocus'
    package: '@azure/communication-react'
    summary: Whether the button can have focus in disabled mode
    fullName: allowDisabledFocus
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'allowDisabledFocus?: boolean'
      return:
        type: boolean
        description: ''
  - name: allowFullScreen
    uid: '@azure/communication-react.ParticipantsButtonProps.allowFullScreen'
    package: '@azure/communication-react'
    summary: ''
    fullName: allowFullScreen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'allowFullScreen?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: allowTransparency
    uid: '@azure/communication-react.ParticipantsButtonProps.allowTransparency'
    package: '@azure/communication-react'
    summary: ''
    fullName: allowTransparency
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'allowTransparency?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: alt
    uid: '@azure/communication-react.ParticipantsButtonProps.alt'
    package: '@azure/communication-react'
    summary: ''
    fullName: alt
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'alt?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-activedescendant
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-activedescendant'
    package: '@azure/communication-react'
    summary: >-
      Identifies the currently active element when DOM focus is on a composite
      widget, textbox, group, or application.
    fullName: aria-activedescendant
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-activedescendant?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-atomic
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-atomic'
    package: '@azure/communication-react'
    summary: >-
      Indicates whether assistive technologies will present all, or only parts
      of, the changed region based on the change notifications defined by the
      aria-relevant attribute.
    fullName: aria-atomic
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-atomic?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-autocomplete
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-autocomplete'
    package: '@azure/communication-react'
    summary: >-
      Indicates whether inputting text could trigger display of one or more
      predictions of the user's intended value for an input and specifies how
      predictions would be

      presented if they are made.
    fullName: aria-autocomplete
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-autocomplete?: "none" | "inline" | "list" | "both" | undefined'
      return:
        type: '"none" | "inline" | "list" | "both" | undefined'
        description: ''
  - name: aria-busy
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-busy'
    package: '@azure/communication-react'
    summary: >-
      Indicates an element is being modified and that assistive technologies MAY
      want to wait until the modifications are complete before exposing them to
      the user.
    fullName: aria-busy
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-busy?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-checked
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-checked'
    package: '@azure/communication-react'
    summary: >-
      Indicates the current "checked" state of checkboxes, radio buttons, and
      other widgets.
    fullName: aria-checked
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-checked?: boolean | "false" | "mixed" | "true" | undefined'
      return:
        type: boolean | "false" | "mixed" | "true" | undefined
        description: ''
  - name: aria-colcount
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-colcount'
    package: '@azure/communication-react'
    summary: 'Defines the total number of columns in a table, grid, or treegrid.'
    fullName: aria-colcount
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-colcount?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-colindex
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-colindex'
    package: '@azure/communication-react'
    summary: >-
      Defines an element's column index or position with respect to the total
      number of columns within a table, grid, or treegrid.
    fullName: aria-colindex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-colindex?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-colspan
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-colspan'
    package: '@azure/communication-react'
    summary: >-
      Defines the number of columns spanned by a cell or gridcell within a
      table, grid, or treegrid.
    fullName: aria-colspan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-colspan?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-controls
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-controls'
    package: '@azure/communication-react'
    summary: >-
      Identifies the element (or elements) whose contents or presence are
      controlled by the current element.
    fullName: aria-controls
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-controls?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-current
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-current'
    package: '@azure/communication-react'
    summary: >-
      Indicates the element that represents the current item within a container
      or set of related elements.
    fullName: aria-current
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        aria-current?: boolean | "false" | "true" | "page" | "step" | "location"
        | "date" | "time" | undefined
      return:
        type: >-
          boolean | "false" | "true" | "page" | "step" | "location" | "date" |
          "time" | undefined
        description: ''
  - name: aria-describedby
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-describedby'
    package: '@azure/communication-react'
    summary: Identifies the element (or elements) that describes the object.
    fullName: aria-describedby
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-describedby?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-details
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-details'
    package: '@azure/communication-react'
    summary: >-
      Identifies the element that provides a detailed, extended description for
      the object.
    fullName: aria-details
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-details?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-disabled
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-disabled'
    package: '@azure/communication-react'
    summary: >-
      Indicates that the element is perceivable but disabled, so it is not
      editable or otherwise operable.
    fullName: aria-disabled
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-disabled?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-dropeffect
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-dropeffect'
    package: '@azure/communication-react'
    summary: >-
      Indicates what functions can be performed when a dragged object is
      released on the drop target.
    fullName: aria-dropeffect
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: in ARIA 1.1
    syntax:
      content: >-
        aria-dropeffect?: "none" | "copy" | "execute" | "link" | "move" |
        "popup" | undefined
      return:
        type: '"none" | "copy" | "execute" | "link" | "move" | "popup" | undefined'
        description: ''
  - name: aria-errormessage
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-errormessage'
    package: '@azure/communication-react'
    summary: Identifies the element that provides an error message for the object.
    fullName: aria-errormessage
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-errormessage?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-expanded
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-expanded'
    package: '@azure/communication-react'
    summary: >-
      Indicates whether the element, or another grouping element it controls, is
      currently expanded or collapsed.
    fullName: aria-expanded
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-expanded?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-flowto
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-flowto'
    package: '@azure/communication-react'
    summary: >-
      Identifies the next element (or elements) in an alternate reading order of
      content which, at the user's discretion,

      allows assistive technology to override the general default of reading in
      document source order.
    fullName: aria-flowto
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-flowto?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-grabbed
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-grabbed'
    package: '@azure/communication-react'
    summary: Indicates an element's "grabbed" state in a drag-and-drop operation.
    fullName: aria-grabbed
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: in ARIA 1.1
    syntax:
      content: 'aria-grabbed?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-haspopup
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-haspopup'
    package: '@azure/communication-react'
    summary: >-
      Indicates the availability and type of interactive popup element, such as
      menu or dialog, that can be triggered by an element.
    fullName: aria-haspopup
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        aria-haspopup?: boolean | "false" | "true" | "menu" | "listbox" | "tree"
        | "grid" | "dialog" | undefined
      return:
        type: >-
          boolean | "false" | "true" | "menu" | "listbox" | "tree" | "grid" |
          "dialog" | undefined
        description: ''
  - name: aria-hidden
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-hidden'
    package: '@azure/communication-react'
    summary: Indicates whether the element is exposed to an accessibility API.
    fullName: aria-hidden
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-hidden?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-invalid
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-invalid'
    package: '@azure/communication-react'
    summary: >-
      Indicates the entered value does not conform to the format expected by the
      application.
    fullName: aria-invalid
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        aria-invalid?: boolean | "false" | "true" | "grammar" | "spelling" |
        undefined
      return:
        type: boolean | "false" | "true" | "grammar" | "spelling" | undefined
        description: ''
  - name: aria-keyshortcuts
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-keyshortcuts'
    package: '@azure/communication-react'
    summary: >-
      Indicates keyboard shortcuts that an author has implemented to activate or
      give focus to an element.
    fullName: aria-keyshortcuts
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-keyshortcuts?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-label
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-label'
    package: '@azure/communication-react'
    summary: Defines a string value that labels the current element.
    fullName: aria-label
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-label?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-labelledby
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-labelledby'
    package: '@azure/communication-react'
    summary: Identifies the element (or elements) that labels the current element.
    fullName: aria-labelledby
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-labelledby?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-level
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-level'
    package: '@azure/communication-react'
    summary: Defines the hierarchical level of an element within a structure.
    fullName: aria-level
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-level?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-live
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-live'
    package: '@azure/communication-react'
    summary: >-
      Indicates that an element will be updated, and describes the types of
      updates the user agents, assistive technologies, and user can expect from
      the live region.
    fullName: aria-live
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-live?: "off" | "assertive" | "polite" | undefined'
      return:
        type: '"off" | "assertive" | "polite" | undefined'
        description: ''
  - name: aria-modal
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-modal'
    package: '@azure/communication-react'
    summary: Indicates whether an element is modal when displayed.
    fullName: aria-modal
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-modal?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-multiline
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-multiline'
    package: '@azure/communication-react'
    summary: >-
      Indicates whether a text box accepts multiple lines of input or only a
      single line.
    fullName: aria-multiline
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-multiline?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-multiselectable
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-multiselectable'
    package: '@azure/communication-react'
    summary: >-
      Indicates that the user may select more than one item from the current
      selectable descendants.
    fullName: aria-multiselectable
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-multiselectable?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-orientation
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-orientation'
    package: '@azure/communication-react'
    summary: >-
      Indicates whether the element's orientation is horizontal, vertical, or
      unknown/ambiguous.
    fullName: aria-orientation
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-orientation?: "horizontal" | "vertical" | undefined'
      return:
        type: '"horizontal" | "vertical" | undefined'
        description: ''
  - name: aria-owns
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-owns'
    package: '@azure/communication-react'
    summary: >-
      Identifies an element (or elements) in order to define a visual,
      functional, or contextual parent/child relationship

      between DOM elements where the DOM hierarchy cannot be used to represent
      the relationship.
    fullName: aria-owns
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-owns?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-placeholder
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-placeholder'
    package: '@azure/communication-react'
    summary: >-
      Defines a short hint (a word or short phrase) intended to aid the user
      with data entry when the control has no value.

      A hint could be a sample value or a brief description of the expected
      format.
    fullName: aria-placeholder
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-placeholder?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-posinset
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-posinset'
    package: '@azure/communication-react'
    summary: >-
      Defines an element's number or position in the current set of listitems or
      treeitems. Not required if all elements in the set are present in the DOM.
    fullName: aria-posinset
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-posinset?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-pressed
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-pressed'
    package: '@azure/communication-react'
    summary: Indicates the current "pressed" state of toggle buttons.
    fullName: aria-pressed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-pressed?: boolean | "false" | "mixed" | "true" | undefined'
      return:
        type: boolean | "false" | "mixed" | "true" | undefined
        description: ''
  - name: aria-readonly
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-readonly'
    package: '@azure/communication-react'
    summary: 'Indicates that the element is not editable, but is otherwise operable.'
    fullName: aria-readonly
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-readonly?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-relevant
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-relevant'
    package: '@azure/communication-react'
    summary: >-
      Indicates what notifications the user agent will trigger when the
      accessibility tree within a live region is modified.
    fullName: aria-relevant
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        aria-relevant?: "additions" | "additions removals" | "additions text" |
        "all" | "removals" | "removals additions" | "removals text" | "text" |
        "text additions" | "text removals" | undefined
      return:
        type: >-
          "additions" | "additions removals" | "additions text" | "all" |
          "removals" | "removals additions" | "removals text" | "text" | "text
          additions" | "text removals" | undefined
        description: ''
  - name: aria-required
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-required'
    package: '@azure/communication-react'
    summary: >-
      Indicates that user input is required on the element before a form may be
      submitted.
    fullName: aria-required
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-required?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-roledescription
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-roledescription'
    package: '@azure/communication-react'
    summary: >-
      Defines a human-readable, author-localized description for the role of an
      element.
    fullName: aria-roledescription
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-roledescription?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: aria-rowcount
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-rowcount'
    package: '@azure/communication-react'
    summary: 'Defines the total number of rows in a table, grid, or treegrid.'
    fullName: aria-rowcount
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-rowcount?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-rowindex
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-rowindex'
    package: '@azure/communication-react'
    summary: >-
      Defines an element's row index or position with respect to the total
      number of rows within a table, grid, or treegrid.
    fullName: aria-rowindex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-rowindex?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-rowspan
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-rowspan'
    package: '@azure/communication-react'
    summary: >-
      Defines the number of rows spanned by a cell or gridcell within a table,
      grid, or treegrid.
    fullName: aria-rowspan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-rowspan?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-selected
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-selected'
    package: '@azure/communication-react'
    summary: Indicates the current "selected" state of various widgets.
    fullName: aria-selected
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-selected?: boolean | "false" | "true" | undefined'
      return:
        type: boolean | "false" | "true" | undefined
        description: ''
  - name: aria-setsize
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-setsize'
    package: '@azure/communication-react'
    summary: >-
      Defines the number of items in the current set of listitems or treeitems.
      Not required if all elements in the set are present in the DOM.
    fullName: aria-setsize
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-setsize?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-sort
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-sort'
    package: '@azure/communication-react'
    summary: >-
      Indicates if items in a table or grid are sorted in ascending or
      descending order.
    fullName: aria-sort
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-sort?: "none" | "ascending" | "descending" | "other" | undefined'
      return:
        type: '"none" | "ascending" | "descending" | "other" | undefined'
        description: ''
  - name: aria-valuemax
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-valuemax'
    package: '@azure/communication-react'
    summary: Defines the maximum allowed value for a range widget.
    fullName: aria-valuemax
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-valuemax?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-valuemin
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-valuemin'
    package: '@azure/communication-react'
    summary: Defines the minimum allowed value for a range widget.
    fullName: aria-valuemin
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-valuemin?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-valuenow
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-valuenow'
    package: '@azure/communication-react'
    summary: Defines the current value for a range widget.
    fullName: aria-valuenow
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-valuenow?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: aria-valuetext
    uid: '@azure/communication-react.ParticipantsButtonProps.aria-valuetext'
    package: '@azure/communication-react'
    summary: >-
      Defines the human readable text alternative of aria-valuenow for a range
      widget.
    fullName: aria-valuetext
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'aria-valuetext?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: ariaDescription
    uid: '@azure/communication-react.ParticipantsButtonProps.ariaDescription'
    package: '@azure/communication-react'
    summary: >
      Detailed description of the button for the benefit of screen readers.

      Besides the compound button, other button types will need more information
      provided to screen reader.
    fullName: ariaDescription
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaDescription?: string'
      return:
        type: string
        description: ''
  - name: ariaHidden
    uid: '@azure/communication-react.ParticipantsButtonProps.ariaHidden'
    package: '@azure/communication-react'
    summary: >-
      If true, add an `aria-hidden` attribute instructing screen readers to
      ignore the element.
    fullName: ariaHidden
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaHidden?: boolean'
      return:
        type: boolean
        description: ''
  - name: ariaLabel
    uid: '@azure/communication-react.ParticipantsButtonProps.ariaLabel'
    package: '@azure/communication-react'
    summary: The aria label of the button for the benefit of screen readers.
    fullName: ariaLabel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'ariaLabel?: string'
      return:
        type: string
        description: ''
  - name: as
    uid: '@azure/communication-react.ParticipantsButtonProps.as'
    package: '@azure/communication-react'
    summary: ''
    fullName: as
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'as?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: async
    uid: '@azure/communication-react.ParticipantsButtonProps.async'
    package: '@azure/communication-react'
    summary: ''
    fullName: async
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'async?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: autoCapitalize
    uid: '@azure/communication-react.ParticipantsButtonProps.autoCapitalize'
    package: '@azure/communication-react'
    summary: ''
    fullName: autoCapitalize
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoCapitalize?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: autoComplete
    uid: '@azure/communication-react.ParticipantsButtonProps.autoComplete'
    package: '@azure/communication-react'
    summary: ''
    fullName: autoComplete
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoComplete?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: autoCorrect
    uid: '@azure/communication-react.ParticipantsButtonProps.autoCorrect'
    package: '@azure/communication-react'
    summary: ''
    fullName: autoCorrect
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoCorrect?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: autoFocus
    uid: '@azure/communication-react.ParticipantsButtonProps.autoFocus'
    package: '@azure/communication-react'
    summary: ''
    fullName: autoFocus
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoFocus?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: autoPlay
    uid: '@azure/communication-react.ParticipantsButtonProps.autoPlay'
    package: '@azure/communication-react'
    summary: ''
    fullName: autoPlay
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoPlay?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: autoSave
    uid: '@azure/communication-react.ParticipantsButtonProps.autoSave'
    package: '@azure/communication-react'
    summary: ''
    fullName: autoSave
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'autoSave?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: buttonType
    uid: '@azure/communication-react.ParticipantsButtonProps.buttonType'
    package: '@azure/communication-react'
    summary: ''
    fullName: buttonType
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: |-
      Deprecated at v1.2.3, to be removed at \>= v2.0.0.
      Use specific button component instead.
    syntax:
      content: 'buttonType?: ButtonType'
      return:
        type: ButtonType
        description: ''
  - name: callInvitationURL
    uid: '@azure/communication-react.ParticipantsButtonProps.callInvitationURL'
    package: '@azure/communication-react'
    summary: URL to invite new participants to the current call
    fullName: callInvitationURL
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'callInvitationURL?: string'
      return:
        type: string
        description: ''
  - name: capture
    uid: '@azure/communication-react.ParticipantsButtonProps.capture'
    package: '@azure/communication-react'
    summary: ''
    fullName: capture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'capture?: boolean | string | undefined'
      return:
        type: boolean | string | undefined
        description: ''
  - name: cellPadding
    uid: '@azure/communication-react.ParticipantsButtonProps.cellPadding'
    package: '@azure/communication-react'
    summary: ''
    fullName: cellPadding
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cellPadding?: number | string | undefined'
      return:
        type: number | string | undefined
        description: ''
  - name: cellSpacing
    uid: '@azure/communication-react.ParticipantsButtonProps.cellSpacing'
    package: '@azure/communication-react'
    summary: ''
    fullName: cellSpacing
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cellSpacing?: number | string | undefined'
      return:
        type: number | string | undefined
        description: ''
  - name: challenge
    uid: '@azure/communication-react.ParticipantsButtonProps.challenge'
    package: '@azure/communication-react'
    summary: ''
    fullName: challenge
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'challenge?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: charSet
    uid: '@azure/communication-react.ParticipantsButtonProps.charSet'
    package: '@azure/communication-react'
    summary: ''
    fullName: charSet
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'charSet?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: checked
    uid: '@azure/communication-react.ParticipantsButtonProps.checked'
    package: '@azure/communication-react'
    summary: Whether the button is checked
    fullName: checked
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'checked?: boolean'
      return:
        type: boolean
        description: ''
  - name: children
    uid: '@azure/communication-react.ParticipantsButtonProps.children'
    package: '@azure/communication-react'
    summary: ''
    fullName: children
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'children?: ReactNode | undefined'
      return:
        type: ReactNode | undefined
        description: ''
  - name: cite
    uid: '@azure/communication-react.ParticipantsButtonProps.cite'
    package: '@azure/communication-react'
    summary: ''
    fullName: cite
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cite?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: classID
    uid: '@azure/communication-react.ParticipantsButtonProps.classID'
    package: '@azure/communication-react'
    summary: ''
    fullName: classID
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'classID?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: className
    uid: '@azure/communication-react.ParticipantsButtonProps.className'
    package: '@azure/communication-react'
    summary: 'If provided, additional class name to provide on the root element.'
    fullName: className
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'className?: string'
      return:
        type: string
        description: ''
  - name: color
    uid: '@azure/communication-react.ParticipantsButtonProps.color'
    package: '@azure/communication-react'
    summary: ''
    fullName: color
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'color?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: cols
    uid: '@azure/communication-react.ParticipantsButtonProps.cols'
    package: '@azure/communication-react'
    summary: ''
    fullName: cols
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'cols?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: colSpan
    uid: '@azure/communication-react.ParticipantsButtonProps.colSpan'
    package: '@azure/communication-react'
    summary: ''
    fullName: colSpan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'colSpan?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: componentRef
    uid: '@azure/communication-react.ParticipantsButtonProps.componentRef'
    package: '@azure/communication-react'
    summary: >-
      Optional callback to access the `IButton` interface. Use this instead of
      `ref` for accessing

      the public methods and properties of the component.
    fullName: componentRef
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'componentRef?: IRefObject<IButton>'
      return:
        type: IRefObject&lt;IButton&gt;
        description: ''
  - name: content
    uid: '@azure/communication-react.ParticipantsButtonProps.content'
    package: '@azure/communication-react'
    summary: ''
    fullName: content
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'content?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: contentEditable
    uid: '@azure/communication-react.ParticipantsButtonProps.contentEditable'
    package: '@azure/communication-react'
    summary: ''
    fullName: contentEditable
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'contentEditable?: Booleanish | "inherit" | undefined'
      return:
        type: Booleanish | "inherit" | undefined
        description: ''
  - name: contextMenu
    uid: '@azure/communication-react.ParticipantsButtonProps.contextMenu'
    package: '@azure/communication-react'
    summary: ''
    fullName: contextMenu
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'contextMenu?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: controls
    uid: '@azure/communication-react.ParticipantsButtonProps.controls'
    package: '@azure/communication-react'
    summary: ''
    fullName: controls
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'controls?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: coords
    uid: '@azure/communication-react.ParticipantsButtonProps.coords'
    package: '@azure/communication-react'
    summary: ''
    fullName: coords
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'coords?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: crossOrigin
    uid: '@azure/communication-react.ParticipantsButtonProps.crossOrigin'
    package: '@azure/communication-react'
    summary: ''
    fullName: crossOrigin
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'crossOrigin?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: dangerouslySetInnerHTML
    uid: '@azure/communication-react.ParticipantsButtonProps.dangerouslySetInnerHTML'
    package: '@azure/communication-react'
    summary: ''
    fullName: dangerouslySetInnerHTML
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dangerouslySetInnerHTML?: Object | undefined'
      return:
        type: Object | undefined
        description: ''
  - name: data
    uid: '@azure/communication-react.ParticipantsButtonProps.data'
    package: '@azure/communication-react'
    summary: Any custom data the developer wishes to associate with the button.
    fullName: data
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'data?: any'
      return:
        type: any
        description: ''
  - name: datatype
    uid: '@azure/communication-react.ParticipantsButtonProps.datatype'
    package: '@azure/communication-react'
    summary: ''
    fullName: datatype
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'datatype?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: dateTime
    uid: '@azure/communication-react.ParticipantsButtonProps.dateTime'
    package: '@azure/communication-react'
    summary: ''
    fullName: dateTime
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dateTime?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: default
    uid: '@azure/communication-react.ParticipantsButtonProps.default'
    package: '@azure/communication-react'
    summary: ''
    fullName: default
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'default?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: defaultChecked
    uid: '@azure/communication-react.ParticipantsButtonProps.defaultChecked'
    package: '@azure/communication-react'
    summary: ''
    fullName: defaultChecked
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultChecked?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: defaultRender
    uid: '@azure/communication-react.ParticipantsButtonProps.defaultRender'
    package: '@azure/communication-react'
    summary: yet unknown docs
    fullName: defaultRender
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultRender?: any'
      return:
        type: any
        description: ''
  - name: defaultValue
    uid: '@azure/communication-react.ParticipantsButtonProps.defaultValue'
    package: '@azure/communication-react'
    summary: ''
    fullName: defaultValue
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultValue?: string | number | ReadonlyArray<string> | undefined'
      return:
        type: string | number | ReadonlyArray&lt;string&gt; | undefined
        description: ''
  - name: defer
    uid: '@azure/communication-react.ParticipantsButtonProps.defer'
    package: '@azure/communication-react'
    summary: ''
    fullName: defer
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defer?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: description
    uid: '@azure/communication-react.ParticipantsButtonProps.description'
    package: '@azure/communication-react'
    summary: Style for the description text if applicable (for compound buttons).
    fullName: description
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Use `secondaryText` instead.
    syntax:
      content: 'description?: IStyle'
      return:
        type: IStyle
        description: ''
  - name: dir
    uid: '@azure/communication-react.ParticipantsButtonProps.dir'
    package: '@azure/communication-react'
    summary: ''
    fullName: dir
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'dir?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: disabled
    uid: '@azure/communication-react.ParticipantsButtonProps.disabled'
    package: '@azure/communication-react'
    summary: Whether the button is disabled
    fullName: disabled
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'disabled?: boolean'
      return:
        type: boolean
        description: ''
  - name: download
    uid: '@azure/communication-react.ParticipantsButtonProps.download'
    package: '@azure/communication-react'
    summary: ''
    fullName: download
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'download?: any'
      return:
        type: any
        description: ''
  - name: draggable
    uid: '@azure/communication-react.ParticipantsButtonProps.draggable'
    package: '@azure/communication-react'
    summary: ''
    fullName: draggable
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'draggable?: Booleanish | undefined'
      return:
        type: Booleanish | undefined
        description: ''
  - name: elementRef
    uid: '@azure/communication-react.ParticipantsButtonProps.elementRef'
    package: '@azure/communication-react'
    summary: Optional callback to access the root DOM element.
    fullName: elementRef
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Temporary solution which will be replaced with ref in the V8 release.
    syntax:
      content: 'elementRef?: React.Ref<HTMLElement>'
      return:
        type: <xref uid="React.Ref" />&lt;HTMLElement&gt;
        description: ''
  - name: encType
    uid: '@azure/communication-react.ParticipantsButtonProps.encType'
    package: '@azure/communication-react'
    summary: ''
    fullName: encType
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'encType?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: excludeMe
    uid: '@azure/communication-react.ParticipantsButtonProps.excludeMe'
    package: '@azure/communication-react'
    summary: >-
      If set to `true`, excludes the local participant from the participant list
      with use of `myUserId` props (required in this case).
    fullName: excludeMe
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'excludeMe?: boolean'
      return:
        type: boolean
        description: ''
  - name: form
    uid: '@azure/communication-react.ParticipantsButtonProps.form'
    package: '@azure/communication-react'
    summary: ''
    fullName: form
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'form?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: formAction
    uid: '@azure/communication-react.ParticipantsButtonProps.formAction'
    package: '@azure/communication-react'
    summary: ''
    fullName: formAction
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formAction?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: formEncType
    uid: '@azure/communication-react.ParticipantsButtonProps.formEncType'
    package: '@azure/communication-react'
    summary: ''
    fullName: formEncType
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formEncType?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: formMethod
    uid: '@azure/communication-react.ParticipantsButtonProps.formMethod'
    package: '@azure/communication-react'
    summary: ''
    fullName: formMethod
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formMethod?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: formNoValidate
    uid: '@azure/communication-react.ParticipantsButtonProps.formNoValidate'
    package: '@azure/communication-react'
    summary: ''
    fullName: formNoValidate
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formNoValidate?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: formTarget
    uid: '@azure/communication-react.ParticipantsButtonProps.formTarget'
    package: '@azure/communication-react'
    summary: ''
    fullName: formTarget
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'formTarget?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: frameBorder
    uid: '@azure/communication-react.ParticipantsButtonProps.frameBorder'
    package: '@azure/communication-react'
    summary: ''
    fullName: frameBorder
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'frameBorder?: number | string | undefined'
      return:
        type: number | string | undefined
        description: ''
  - name: getClassNames
    uid: '@azure/communication-react.ParticipantsButtonProps.getClassNames'
    package: '@azure/communication-react'
    summary: >-
      Method to provide the classnames to style a button.

      The default value for this prop is the `getClassnames` func defined in
      `BaseButton.classnames.ts`.
    fullName: getClassNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getClassNames?: (theme: ITheme, className: string, variantClassName:
        string, iconClassName: string | undefined, menuIconClassName: string |
        undefined, disabled: boolean, checked: boolean, expanded: boolean,
        hasMenu: boolean, isSplit: boolean | undefined, allowDisabledFocus:
        boolean) => IButtonClassNames
      return:
        type: >-
          (theme: ITheme, className: string, variantClassName: string,
          iconClassName: string | undefined, menuIconClassName: string |
          undefined, disabled: boolean, checked: boolean, expanded: boolean,
          hasMenu: boolean, isSplit: boolean | undefined, allowDisabledFocus:
          boolean) =&gt; IButtonClassNames
        description: ''
  - name: getSplitButtonClassNames
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.getSplitButtonClassNames
    package: '@azure/communication-react'
    summary: >-
      Method to provide the classnames to style a button.

      The default value for this prop is the `getClassnames` func defined in
      `BaseButton.classnames.ts`.
    fullName: getSplitButtonClassNames
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        getSplitButtonClassNames?: (disabled: boolean, expanded: boolean,
        checked: boolean, allowDisabledFocus: boolean) => ISplitButtonClassNames
      return:
        type: >-
          (disabled: boolean, expanded: boolean, checked: boolean,
          allowDisabledFocus: boolean) =&gt; ISplitButtonClassNames
        description: ''
  - name: headers
    uid: '@azure/communication-react.ParticipantsButtonProps.headers'
    package: '@azure/communication-react'
    summary: ''
    fullName: headers
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'headers?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: height
    uid: '@azure/communication-react.ParticipantsButtonProps.height'
    package: '@azure/communication-react'
    summary: ''
    fullName: height
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'height?: number | string | undefined'
      return:
        type: number | string | undefined
        description: ''
  - name: hidden
    uid: '@azure/communication-react.ParticipantsButtonProps.hidden'
    package: '@azure/communication-react'
    summary: ''
    fullName: hidden
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hidden?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: high
    uid: '@azure/communication-react.ParticipantsButtonProps.high'
    package: '@azure/communication-react'
    summary: ''
    fullName: high
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'high?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: href
    uid: '@azure/communication-react.ParticipantsButtonProps.href'
    package: '@azure/communication-react'
    summary: 'If provided, this component will be rendered as an anchor.'
    fullName: href
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'href?: string'
      return:
        type: string
        description: ''
  - name: hrefLang
    uid: '@azure/communication-react.ParticipantsButtonProps.hrefLang'
    package: '@azure/communication-react'
    summary: ''
    fullName: hrefLang
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'hrefLang?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: htmlFor
    uid: '@azure/communication-react.ParticipantsButtonProps.htmlFor'
    package: '@azure/communication-react'
    summary: ''
    fullName: htmlFor
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'htmlFor?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: httpEquiv
    uid: '@azure/communication-react.ParticipantsButtonProps.httpEquiv'
    package: '@azure/communication-react'
    summary: ''
    fullName: httpEquiv
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'httpEquiv?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: iconProps
    uid: '@azure/communication-react.ParticipantsButtonProps.iconProps'
    package: '@azure/communication-react'
    summary: The props for the icon shown in the button.
    fullName: iconProps
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'iconProps?: IIconProps'
      return:
        type: IIconProps
        description: ''
  - name: id
    uid: '@azure/communication-react.ParticipantsButtonProps.id'
    package: '@azure/communication-react'
    summary: ''
    fullName: id
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'id?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: inlist
    uid: '@azure/communication-react.ParticipantsButtonProps.inlist'
    package: '@azure/communication-react'
    summary: ''
    fullName: inlist
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'inlist?: any'
      return:
        type: any
        description: ''
  - name: inputMode
    uid: '@azure/communication-react.ParticipantsButtonProps.inputMode'
    package: '@azure/communication-react'
    summary: >-
      Hints at the type of data that might be entered by the user while editing
      the element or its contents
    fullName: inputMode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" |
        "decimal" | "search" | undefined
      return:
        type: >-
          "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" |
          "search" | undefined
        description: ''
  - name: integrity
    uid: '@azure/communication-react.ParticipantsButtonProps.integrity'
    package: '@azure/communication-react'
    summary: ''
    fullName: integrity
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'integrity?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: is
    uid: '@azure/communication-react.ParticipantsButtonProps.is'
    package: '@azure/communication-react'
    summary: >-
      Specify that a standard HTML element should behave like a defined custom
      built-in element
    fullName: is
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'is?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: itemID
    uid: '@azure/communication-react.ParticipantsButtonProps.itemID'
    package: '@azure/communication-react'
    summary: ''
    fullName: itemID
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemID?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: itemProp
    uid: '@azure/communication-react.ParticipantsButtonProps.itemProp'
    package: '@azure/communication-react'
    summary: ''
    fullName: itemProp
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemProp?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: itemRef
    uid: '@azure/communication-react.ParticipantsButtonProps.itemRef'
    package: '@azure/communication-react'
    summary: ''
    fullName: itemRef
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemRef?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: itemScope
    uid: '@azure/communication-react.ParticipantsButtonProps.itemScope'
    package: '@azure/communication-react'
    summary: ''
    fullName: itemScope
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemScope?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: itemType
    uid: '@azure/communication-react.ParticipantsButtonProps.itemType'
    package: '@azure/communication-react'
    summary: ''
    fullName: itemType
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'itemType?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: keyParams
    uid: '@azure/communication-react.ParticipantsButtonProps.keyParams'
    package: '@azure/communication-react'
    summary: ''
    fullName: keyParams
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'keyParams?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: keytipProps
    uid: '@azure/communication-react.ParticipantsButtonProps.keytipProps'
    package: '@azure/communication-react'
    summary: Optional keytip for this button
    fullName: keytipProps
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'keytipProps?: IKeytipProps'
      return:
        type: IKeytipProps
        description: ''
  - name: keyType
    uid: '@azure/communication-react.ParticipantsButtonProps.keyType'
    package: '@azure/communication-react'
    summary: ''
    fullName: keyType
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'keyType?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: kind
    uid: '@azure/communication-react.ParticipantsButtonProps.kind'
    package: '@azure/communication-react'
    summary: ''
    fullName: kind
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'kind?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: label
    uid: '@azure/communication-react.ParticipantsButtonProps.label'
    package: '@azure/communication-react'
    summary: ''
    fullName: label
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'label?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: labelKey
    uid: '@azure/communication-react.ParticipantsButtonProps.labelKey'
    package: '@azure/communication-react'
    summary: Key to use for the Label component
    fullName: labelKey
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'labelKey?: string'
      return:
        type: string
        description: ''
  - name: lang
    uid: '@azure/communication-react.ParticipantsButtonProps.lang'
    package: '@azure/communication-react'
    summary: ''
    fullName: lang
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'lang?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: list
    uid: '@azure/communication-react.ParticipantsButtonProps.list'
    package: '@azure/communication-react'
    summary: ''
    fullName: list
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'list?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: loop
    uid: '@azure/communication-react.ParticipantsButtonProps.loop'
    package: '@azure/communication-react'
    summary: ''
    fullName: loop
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'loop?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: low
    uid: '@azure/communication-react.ParticipantsButtonProps.low'
    package: '@azure/communication-react'
    summary: ''
    fullName: low
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'low?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: manifest
    uid: '@azure/communication-react.ParticipantsButtonProps.manifest'
    package: '@azure/communication-react'
    summary: ''
    fullName: manifest
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'manifest?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: marginHeight
    uid: '@azure/communication-react.ParticipantsButtonProps.marginHeight'
    package: '@azure/communication-react'
    summary: ''
    fullName: marginHeight
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'marginHeight?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: marginWidth
    uid: '@azure/communication-react.ParticipantsButtonProps.marginWidth'
    package: '@azure/communication-react'
    summary: ''
    fullName: marginWidth
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'marginWidth?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: max
    uid: '@azure/communication-react.ParticipantsButtonProps.max'
    package: '@azure/communication-react'
    summary: ''
    fullName: max
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'max?: number | string | undefined'
      return:
        type: number | string | undefined
        description: ''
  - name: maxLength
    uid: '@azure/communication-react.ParticipantsButtonProps.maxLength'
    package: '@azure/communication-react'
    summary: ''
    fullName: maxLength
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'maxLength?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: media
    uid: '@azure/communication-react.ParticipantsButtonProps.media'
    package: '@azure/communication-react'
    summary: ''
    fullName: media
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'media?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: mediaGroup
    uid: '@azure/communication-react.ParticipantsButtonProps.mediaGroup'
    package: '@azure/communication-react'
    summary: ''
    fullName: mediaGroup
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'mediaGroup?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: menuAs
    uid: '@azure/communication-react.ParticipantsButtonProps.menuAs'
    package: '@azure/communication-react'
    summary: Render a custom menu in place of the normal one.
    fullName: menuAs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'menuAs?: IComponentAs<IContextualMenuProps>'
      return:
        type: IComponentAs&lt;IContextualMenuProps&gt;
        description: ''
  - name: menuIconProps
    uid: '@azure/communication-react.ParticipantsButtonProps.menuIconProps'
    package: '@azure/communication-react'
    summary: The props for the icon shown when providing a menu dropdown.
    fullName: menuIconProps
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'menuIconProps?: IIconProps'
      return:
        type: IIconProps
        description: ''
  - name: menuProps
    uid: '@azure/communication-react.ParticipantsButtonProps.menuProps'
    package: '@azure/communication-react'
    summary: >-
      Props for button menu. Providing this will default to showing the menu
      icon. See `menuIconProps` for overriding

      how the default icon looks. Providing this in addition to `onClick` and
      setting the `split` property to `true`

      will render a SplitButton.
    fullName: menuProps
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'menuProps?: IContextualMenuProps'
      return:
        type: IContextualMenuProps
        description: ''
  - name: menuTriggerKeyCode
    uid: '@azure/communication-react.ParticipantsButtonProps.menuTriggerKeyCode'
    package: '@azure/communication-react'
    summary: >-
      Provides a custom KeyCode that can be used to open the button menu.

      A value of `null` can be provided to disable opening the button menu with
      a key press.
    fullName: menuTriggerKeyCode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'menuTriggerKeyCode?: KeyCodes | null'
      return:
        type: KeyCodes | null
        description: ''
  - name: method
    uid: '@azure/communication-react.ParticipantsButtonProps.method'
    package: '@azure/communication-react'
    summary: ''
    fullName: method
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'method?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: min
    uid: '@azure/communication-react.ParticipantsButtonProps.min'
    package: '@azure/communication-react'
    summary: ''
    fullName: min
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'min?: number | string | undefined'
      return:
        type: number | string | undefined
        description: ''
  - name: minLength
    uid: '@azure/communication-react.ParticipantsButtonProps.minLength'
    package: '@azure/communication-react'
    summary: ''
    fullName: minLength
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'minLength?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: multiple
    uid: '@azure/communication-react.ParticipantsButtonProps.multiple'
    package: '@azure/communication-react'
    summary: ''
    fullName: multiple
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'multiple?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: muted
    uid: '@azure/communication-react.ParticipantsButtonProps.muted'
    package: '@azure/communication-react'
    summary: ''
    fullName: muted
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'muted?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: myUserId
    uid: '@azure/communication-react.ParticipantsButtonProps.myUserId'
    package: '@azure/communication-react'
    summary: User ID of user
    fullName: myUserId
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'myUserId?: string'
      return:
        type: string
        description: ''
  - name: name
    uid: '@azure/communication-react.ParticipantsButtonProps.name'
    package: '@azure/communication-react'
    summary: ''
    fullName: name
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'name?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: nonce
    uid: '@azure/communication-react.ParticipantsButtonProps.nonce'
    package: '@azure/communication-react'
    summary: ''
    fullName: nonce
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'nonce?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: noValidate
    uid: '@azure/communication-react.ParticipantsButtonProps.noValidate'
    package: '@azure/communication-react'
    summary: ''
    fullName: noValidate
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'noValidate?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: onAbort
    uid: '@azure/communication-react.ParticipantsButtonProps.onAbort'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAbort
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAbort?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAbortCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onAbortCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAbortCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAbortCapture?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAfterMenuDismiss
    uid: '@azure/communication-react.ParticipantsButtonProps.onAfterMenuDismiss'
    package: '@azure/communication-react'
    summary: >-
      Callback that runs after Button's contextual menu was closed (removed from
      the DOM)
    fullName: onAfterMenuDismiss
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onAfterMenuDismiss?: () => void'
      return:
        type: () =&gt; void
        description: ''
  - name: onAnimationEnd
    uid: '@azure/communication-react.ParticipantsButtonProps.onAnimationEnd'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAnimationEnd
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAnimationEnd?: AnimationEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          AnimationEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAnimationEndCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onAnimationEndCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAnimationEndCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAnimationEndCapture?: AnimationEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          AnimationEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAnimationIteration
    uid: '@azure/communication-react.ParticipantsButtonProps.onAnimationIteration'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAnimationIteration
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAnimationIteration?: AnimationEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          AnimationEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAnimationIterationCapture
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.onAnimationIterationCapture
    package: '@azure/communication-react'
    summary: ''
    fullName: onAnimationIterationCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAnimationIterationCapture?: AnimationEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          AnimationEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAnimationStart
    uid: '@azure/communication-react.ParticipantsButtonProps.onAnimationStart'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAnimationStart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAnimationStart?: AnimationEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          AnimationEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAnimationStartCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onAnimationStartCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAnimationStartCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAnimationStartCapture?: AnimationEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          AnimationEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAuxClick
    uid: '@azure/communication-react.ParticipantsButtonProps.onAuxClick'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAuxClick
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAuxClick?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onAuxClickCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onAuxClickCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onAuxClickCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onAuxClickCapture?: MouseEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onBeforeInput
    uid: '@azure/communication-react.ParticipantsButtonProps.onBeforeInput'
    package: '@azure/communication-react'
    summary: ''
    fullName: onBeforeInput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onBeforeInput?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onBeforeInputCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onBeforeInputCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onBeforeInputCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onBeforeInputCapture?: FormEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onBlur
    uid: '@azure/communication-react.ParticipantsButtonProps.onBlur'
    package: '@azure/communication-react'
    summary: ''
    fullName: onBlur
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onBlur?: FocusEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FocusEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onBlurCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onBlurCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onBlurCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onBlurCapture?: FocusEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FocusEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCanPlay
    uid: '@azure/communication-react.ParticipantsButtonProps.onCanPlay'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCanPlay
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCanPlay?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCanPlayCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onCanPlayCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCanPlayCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCanPlayCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCanPlayThrough
    uid: '@azure/communication-react.ParticipantsButtonProps.onCanPlayThrough'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCanPlayThrough
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCanPlayThrough?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCanPlayThroughCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onCanPlayThroughCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCanPlayThroughCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCanPlayThroughCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onChange
    uid: '@azure/communication-react.ParticipantsButtonProps.onChange'
    package: '@azure/communication-react'
    summary: ''
    fullName: onChange
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onChange?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onChangeCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onChangeCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onChangeCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onChangeCapture?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onClick
    uid: '@azure/communication-react.ParticipantsButtonProps.onClick'
    package: '@azure/communication-react'
    summary: ''
    fullName: onClick
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onClick?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onClickCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onClickCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onClickCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onClickCapture?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCompositionEnd
    uid: '@azure/communication-react.ParticipantsButtonProps.onCompositionEnd'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCompositionEnd
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCompositionEnd?: CompositionEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          CompositionEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCompositionEndCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onCompositionEndCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCompositionEndCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCompositionEndCapture?: CompositionEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          CompositionEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCompositionStart
    uid: '@azure/communication-react.ParticipantsButtonProps.onCompositionStart'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCompositionStart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCompositionStart?: CompositionEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          CompositionEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCompositionStartCapture
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.onCompositionStartCapture
    package: '@azure/communication-react'
    summary: ''
    fullName: onCompositionStartCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCompositionStartCapture?: CompositionEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          CompositionEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCompositionUpdate
    uid: '@azure/communication-react.ParticipantsButtonProps.onCompositionUpdate'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCompositionUpdate
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCompositionUpdate?: CompositionEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          CompositionEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCompositionUpdateCapture
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.onCompositionUpdateCapture
    package: '@azure/communication-react'
    summary: ''
    fullName: onCompositionUpdateCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCompositionUpdateCapture?: CompositionEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          CompositionEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onContextMenu
    uid: '@azure/communication-react.ParticipantsButtonProps.onContextMenu'
    package: '@azure/communication-react'
    summary: ''
    fullName: onContextMenu
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onContextMenu?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onContextMenuCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onContextMenuCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onContextMenuCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onContextMenuCapture?: MouseEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCopy
    uid: '@azure/communication-react.ParticipantsButtonProps.onCopy'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCopy
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCopy?: ClipboardEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ClipboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCopyCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onCopyCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCopyCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCopyCapture?: ClipboardEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ClipboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCut
    uid: '@azure/communication-react.ParticipantsButtonProps.onCut'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCut
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCut?: ClipboardEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ClipboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onCutCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onCutCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onCutCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onCutCapture?: ClipboardEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ClipboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDoubleClick
    uid: '@azure/communication-react.ParticipantsButtonProps.onDoubleClick'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDoubleClick
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDoubleClick?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDoubleClickCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDoubleClickCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDoubleClickCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDoubleClickCapture?: MouseEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDrag
    uid: '@azure/communication-react.ParticipantsButtonProps.onDrag'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDrag
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDrag?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragCapture?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragEnd
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragEnd'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragEnd
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragEnd?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragEndCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragEndCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragEndCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragEndCapture?: DragEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragEnter
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragEnter'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragEnter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragEnter?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragEnterCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragEnterCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragEnterCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragEnterCapture?: DragEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragExit
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragExit'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragExit
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragExit?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragExitCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragExitCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragExitCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragExitCapture?: DragEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragLeave
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragLeave'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragLeave
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragLeave?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragLeaveCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragLeaveCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragLeaveCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragLeaveCapture?: DragEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragOver
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragOver'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragOver
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragOver?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragOverCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragOverCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragOverCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragOverCapture?: DragEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragStart
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragStart'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragStart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragStart?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDragStartCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDragStartCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDragStartCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDragStartCapture?: DragEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDrop
    uid: '@azure/communication-react.ParticipantsButtonProps.onDrop'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDrop
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDrop?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDropCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDropCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDropCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDropCapture?: DragEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          DragEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDurationChange
    uid: '@azure/communication-react.ParticipantsButtonProps.onDurationChange'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDurationChange
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDurationChange?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onDurationChangeCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onDurationChangeCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onDurationChangeCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onDurationChangeCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onEmptied
    uid: '@azure/communication-react.ParticipantsButtonProps.onEmptied'
    package: '@azure/communication-react'
    summary: ''
    fullName: onEmptied
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onEmptied?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onEmptiedCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onEmptiedCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onEmptiedCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onEmptiedCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onEncrypted
    uid: '@azure/communication-react.ParticipantsButtonProps.onEncrypted'
    package: '@azure/communication-react'
    summary: ''
    fullName: onEncrypted
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onEncrypted?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onEncryptedCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onEncryptedCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onEncryptedCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onEncryptedCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onEnded
    uid: '@azure/communication-react.ParticipantsButtonProps.onEnded'
    package: '@azure/communication-react'
    summary: ''
    fullName: onEnded
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onEnded?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onEndedCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onEndedCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onEndedCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onEndedCapture?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onError
    uid: '@azure/communication-react.ParticipantsButtonProps.onError'
    package: '@azure/communication-react'
    summary: ''
    fullName: onError
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onError?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onErrorCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onErrorCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onErrorCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onErrorCapture?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onFocus
    uid: '@azure/communication-react.ParticipantsButtonProps.onFocus'
    package: '@azure/communication-react'
    summary: ''
    fullName: onFocus
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onFocus?: FocusEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FocusEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onFocusCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onFocusCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onFocusCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onFocusCapture?: FocusEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FocusEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onGotPointerCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onGotPointerCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onGotPointerCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onGotPointerCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onGotPointerCaptureCapture
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.onGotPointerCaptureCapture
    package: '@azure/communication-react'
    summary: ''
    fullName: onGotPointerCaptureCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onGotPointerCaptureCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onInput
    uid: '@azure/communication-react.ParticipantsButtonProps.onInput'
    package: '@azure/communication-react'
    summary: ''
    fullName: onInput
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onInput?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onInputCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onInputCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onInputCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onInputCapture?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onInvalid
    uid: '@azure/communication-react.ParticipantsButtonProps.onInvalid'
    package: '@azure/communication-react'
    summary: ''
    fullName: onInvalid
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onInvalid?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onInvalidCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onInvalidCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onInvalidCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onInvalidCapture?: FormEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onKeyDown
    uid: '@azure/communication-react.ParticipantsButtonProps.onKeyDown'
    package: '@azure/communication-react'
    summary: ''
    fullName: onKeyDown
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onKeyDown?: KeyboardEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          KeyboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onKeyDownCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onKeyDownCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onKeyDownCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onKeyDownCapture?: KeyboardEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          KeyboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onKeyPress
    uid: '@azure/communication-react.ParticipantsButtonProps.onKeyPress'
    package: '@azure/communication-react'
    summary: ''
    fullName: onKeyPress
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onKeyPress?: KeyboardEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          KeyboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onKeyPressCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onKeyPressCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onKeyPressCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onKeyPressCapture?: KeyboardEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          KeyboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onKeyUp
    uid: '@azure/communication-react.ParticipantsButtonProps.onKeyUp'
    package: '@azure/communication-react'
    summary: ''
    fullName: onKeyUp
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onKeyUp?: KeyboardEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          KeyboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onKeyUpCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onKeyUpCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onKeyUpCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onKeyUpCapture?: KeyboardEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          KeyboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLoad
    uid: '@azure/communication-react.ParticipantsButtonProps.onLoad'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLoad
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLoad?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLoadCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onLoadCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLoadCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLoadCapture?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLoadedData
    uid: '@azure/communication-react.ParticipantsButtonProps.onLoadedData'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLoadedData
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLoadedData?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLoadedDataCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onLoadedDataCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLoadedDataCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLoadedDataCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLoadedMetadata
    uid: '@azure/communication-react.ParticipantsButtonProps.onLoadedMetadata'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLoadedMetadata
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLoadedMetadata?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLoadedMetadataCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onLoadedMetadataCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLoadedMetadataCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLoadedMetadataCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLoadStart
    uid: '@azure/communication-react.ParticipantsButtonProps.onLoadStart'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLoadStart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLoadStart?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLoadStartCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onLoadStartCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLoadStartCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLoadStartCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLostPointerCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onLostPointerCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onLostPointerCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLostPointerCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onLostPointerCaptureCapture
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.onLostPointerCaptureCapture
    package: '@azure/communication-react'
    summary: ''
    fullName: onLostPointerCaptureCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onLostPointerCaptureCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMenuClick
    uid: '@azure/communication-react.ParticipantsButtonProps.onMenuClick'
    package: '@azure/communication-react'
    summary: Optional callback when menu is clicked.
    fullName: onMenuClick
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMenuClick?: (ev?: MouseEvent<HTMLElement> |
        KeyboardEvent<HTMLElement>, button?: IButtonProps) => void
      return:
        type: >-
          (ev?: MouseEvent&lt;HTMLElement&gt; |
          KeyboardEvent&lt;HTMLElement&gt;, button?: IButtonProps) =&gt; void
        description: ''
  - name: onMouseDown
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseDown'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseDown
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseDown?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseDownCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseDownCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseDownCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseDownCapture?: MouseEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseEnter
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseEnter'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseEnter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseEnter?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseLeave
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseLeave'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseLeave
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseLeave?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseMove
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseMove'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseMove
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseMove?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseMoveCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseMoveCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseMoveCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseMoveCapture?: MouseEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseOut
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseOut'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseOut
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseOut?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseOutCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseOutCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseOutCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseOutCapture?: MouseEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseOver
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseOver'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseOver
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseOver?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseOverCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseOverCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseOverCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseOverCapture?: MouseEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseUp
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseUp'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseUp
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseUp?: MouseEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMouseUpCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onMouseUpCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onMouseUpCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onMouseUpCapture?: MouseEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          MouseEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onMuteAll
    uid: '@azure/communication-react.ParticipantsButtonProps.onMuteAll'
    package: '@azure/communication-react'
    summary: CallBack to mute all remote participants
    fullName: onMuteAll
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onMuteAll?: () => void'
      return:
        type: () =&gt; void
        description: ''
  - name: onParticipantRemove
    uid: '@azure/communication-react.ParticipantsButtonProps.onParticipantRemove'
    package: '@azure/communication-react'
    summary: Optional callback to render the context menu for each participant
    fullName: onParticipantRemove
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onParticipantRemove?: (userId: string) => void'
      return:
        type: '(userId: string) =&gt; void'
        description: ''
  - name: onPaste
    uid: '@azure/communication-react.ParticipantsButtonProps.onPaste'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPaste
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPaste?: ClipboardEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ClipboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPasteCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPasteCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPasteCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPasteCapture?: ClipboardEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ClipboardEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPause
    uid: '@azure/communication-react.ParticipantsButtonProps.onPause'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPause
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPause?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPauseCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPauseCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPauseCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPauseCapture?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPlay
    uid: '@azure/communication-react.ParticipantsButtonProps.onPlay'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPlay
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPlay?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPlayCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPlayCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPlayCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPlayCapture?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPlaying
    uid: '@azure/communication-react.ParticipantsButtonProps.onPlaying'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPlaying
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPlaying?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPlayingCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPlayingCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPlayingCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPlayingCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerCancel
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerCancel'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerCancel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerCancel?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerCancelCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerCancelCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerCancelCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerCancelCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerDown
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerDown'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerDown
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerDown?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerDownCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerDownCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerDownCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerDownCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerEnter
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerEnter'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerEnter
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerEnter?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerEnterCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerEnterCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerEnterCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerEnterCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerLeave
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerLeave'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerLeave
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerLeave?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerLeaveCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerLeaveCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerLeaveCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerLeaveCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerMove
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerMove'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerMove
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerMove?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerMoveCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerMoveCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerMoveCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerMoveCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerOut
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerOut'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerOut
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerOut?: PointerEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerOutCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerOutCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerOutCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerOutCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerOver
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerOver'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerOver
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerOver?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerOverCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerOverCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerOverCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerOverCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerUp
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerUp'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerUp
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerUp?: PointerEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onPointerUpCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onPointerUpCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onPointerUpCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onPointerUpCapture?: PointerEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          PointerEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onProgress
    uid: '@azure/communication-react.ParticipantsButtonProps.onProgress'
    package: '@azure/communication-react'
    summary: ''
    fullName: onProgress
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onProgress?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onProgressCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onProgressCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onProgressCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onProgressCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onRateChange
    uid: '@azure/communication-react.ParticipantsButtonProps.onRateChange'
    package: '@azure/communication-react'
    summary: ''
    fullName: onRateChange
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onRateChange?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onRateChangeCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onRateChangeCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onRateChangeCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onRateChangeCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onRenderAriaDescription
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderAriaDescription'
    package: '@azure/communication-react'
    summary: Custom render function for the aria description element.
    fullName: onRenderAriaDescription
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderAriaDescription?: IRenderFunction<IButtonProps>'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
        description: ''
  - name: onRenderAvatar
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderAvatar'
    package: '@azure/communication-react'
    summary: >-
      Optional callback to render the avatar for each participant. This property
      will have no effect if `onRenderParticipant` is assigned.
    fullName: onRenderAvatar
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderAvatar?: OnRenderAvatarCallback'
      return:
        type: <xref uid="@azure/communication-react.OnRenderAvatarCallback" />
        description: ''
  - name: onRenderChildren
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderChildren'
    package: '@azure/communication-react'
    summary: Custom render function for rendering the button children.
    fullName: onRenderChildren
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderChildren?: IRenderFunction<IButtonProps>'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
        description: ''
  - name: onRenderDescription
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderDescription'
    package: '@azure/communication-react'
    summary: Custom render function for the desciption text.
    fullName: onRenderDescription
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderDescription?: IRenderFunction<IButtonProps>'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
        description: ''
  - name: onRenderIcon
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderIcon'
    package: '@azure/communication-react'
    summary: Custom render function for the icon
    fullName: onRenderIcon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderIcon?: IRenderFunction<IButtonProps>'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
        description: ''
  - name: onRenderMenu
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderMenu'
    package: '@azure/communication-react'
    summary: ''
    fullName: onRenderMenu
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: |-
      Deprecated at v6.3.2, to be removed at \>= v7.0.0.
      Use `menuAs` instead.
    syntax:
      content: 'onRenderMenu?: IRenderFunction<IContextualMenuProps>'
      return:
        type: IRenderFunction&lt;IContextualMenuProps&gt;
        description: ''
  - name: onRenderMenuIcon
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderMenuIcon'
    package: '@azure/communication-react'
    summary: Custom render function for button menu icon
    fullName: onRenderMenuIcon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderMenuIcon?: IRenderFunction<IButtonProps>'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
        description: ''
  - name: onRenderOffIcon
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderOffIcon'
    package: '@azure/communication-react'
    summary: Icon to render when the button is not checked.
    fullName: onRenderOffIcon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderOffIcon?: IRenderFunction<IButtonProps>'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
        description: ''
  - name: onRenderOnIcon
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderOnIcon'
    package: '@azure/communication-react'
    summary: Icon to render when the button is checked.
    fullName: onRenderOnIcon
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderOnIcon?: IRenderFunction<IButtonProps>'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
        description: ''
  - name: onRenderParticipant
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderParticipant'
    package: '@azure/communication-react'
    summary: >-
      Optional callback to render each participant. If no callback is provided,
      each participant will be rendered with `ParticipantItem`
    fullName: onRenderParticipant
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onRenderParticipant?: (participant: CommunicationParticipant) => Element
        | null
      return:
        type: '(participant: CommunicationParticipant) =&gt; Element | null'
        description: ''
  - name: onRenderParticipantList
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderParticipantList'
    package: '@azure/communication-react'
    summary: Optional callback to render the participant list.
    fullName: onRenderParticipantList
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onRenderParticipantList?: (props: ParticipantListProps) => Element |
        null
      return:
        type: '(props: ParticipantListProps) =&gt; Element | null'
        description: ''
  - name: onRenderText
    uid: '@azure/communication-react.ParticipantsButtonProps.onRenderText'
    package: '@azure/communication-react'
    summary: Custom render function for the label text.
    fullName: onRenderText
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'onRenderText?: IRenderFunction<IButtonProps>'
      return:
        type: IRenderFunction&lt;IButtonProps&gt;
        description: ''
  - name: onReset
    uid: '@azure/communication-react.ParticipantsButtonProps.onReset'
    package: '@azure/communication-react'
    summary: ''
    fullName: onReset
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onReset?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onResetCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onResetCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onResetCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onResetCapture?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onScroll
    uid: '@azure/communication-react.ParticipantsButtonProps.onScroll'
    package: '@azure/communication-react'
    summary: ''
    fullName: onScroll
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onScroll?: UIEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          UIEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onScrollCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onScrollCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onScrollCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onScrollCapture?: UIEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          UIEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSeeked
    uid: '@azure/communication-react.ParticipantsButtonProps.onSeeked'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSeeked
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSeeked?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSeekedCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onSeekedCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSeekedCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSeekedCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSeeking
    uid: '@azure/communication-react.ParticipantsButtonProps.onSeeking'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSeeking
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSeeking?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSeekingCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onSeekingCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSeekingCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSeekingCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSelect
    uid: '@azure/communication-react.ParticipantsButtonProps.onSelect'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSelect
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSelect?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSelectCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onSelectCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSelectCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSelectCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onStalled
    uid: '@azure/communication-react.ParticipantsButtonProps.onStalled'
    package: '@azure/communication-react'
    summary: ''
    fullName: onStalled
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onStalled?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onStalledCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onStalledCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onStalledCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onStalledCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSubmit
    uid: '@azure/communication-react.ParticipantsButtonProps.onSubmit'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSubmit
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSubmit?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSubmitCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onSubmitCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSubmitCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSubmitCapture?: FormEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          FormEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSuspend
    uid: '@azure/communication-react.ParticipantsButtonProps.onSuspend'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSuspend
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSuspend?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onSuspendCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onSuspendCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onSuspendCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onSuspendCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTimeUpdate
    uid: '@azure/communication-react.ParticipantsButtonProps.onTimeUpdate'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTimeUpdate
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTimeUpdate?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTimeUpdateCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onTimeUpdateCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTimeUpdateCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTimeUpdateCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTouchCancel
    uid: '@azure/communication-react.ParticipantsButtonProps.onTouchCancel'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTouchCancel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTouchCancel?: TouchEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          TouchEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTouchCancelCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onTouchCancelCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTouchCancelCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTouchCancelCapture?: TouchEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          TouchEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTouchEnd
    uid: '@azure/communication-react.ParticipantsButtonProps.onTouchEnd'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTouchEnd
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTouchEnd?: TouchEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          TouchEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTouchEndCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onTouchEndCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTouchEndCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTouchEndCapture?: TouchEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          TouchEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTouchMove
    uid: '@azure/communication-react.ParticipantsButtonProps.onTouchMove'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTouchMove
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTouchMove?: TouchEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          TouchEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTouchMoveCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onTouchMoveCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTouchMoveCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTouchMoveCapture?: TouchEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          TouchEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTouchStart
    uid: '@azure/communication-react.ParticipantsButtonProps.onTouchStart'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTouchStart
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTouchStart?: TouchEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          TouchEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTouchStartCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onTouchStartCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTouchStartCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTouchStartCapture?: TouchEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          TouchEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTransitionEnd
    uid: '@azure/communication-react.ParticipantsButtonProps.onTransitionEnd'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTransitionEnd
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTransitionEnd?: TransitionEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          TransitionEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onTransitionEndCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onTransitionEndCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onTransitionEndCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onTransitionEndCapture?: TransitionEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          TransitionEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onVolumeChange
    uid: '@azure/communication-react.ParticipantsButtonProps.onVolumeChange'
    package: '@azure/communication-react'
    summary: ''
    fullName: onVolumeChange
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onVolumeChange?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onVolumeChangeCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onVolumeChangeCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onVolumeChangeCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onVolumeChangeCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onWaiting
    uid: '@azure/communication-react.ParticipantsButtonProps.onWaiting'
    package: '@azure/communication-react'
    summary: ''
    fullName: onWaiting
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onWaiting?: ReactEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onWaitingCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onWaitingCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onWaitingCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onWaitingCapture?: ReactEventHandler<HTMLAnchorElement |
        HTMLButtonElement | HTMLDivElement | BaseButton | Button |
        HTMLSpanElement> | undefined
      return:
        type: >-
          ReactEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onWheel
    uid: '@azure/communication-react.ParticipantsButtonProps.onWheel'
    package: '@azure/communication-react'
    summary: ''
    fullName: onWheel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onWheel?: WheelEventHandler<HTMLAnchorElement | HTMLButtonElement |
        HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          WheelEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: onWheelCapture
    uid: '@azure/communication-react.ParticipantsButtonProps.onWheelCapture'
    package: '@azure/communication-react'
    summary: ''
    fullName: onWheelCapture
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        onWheelCapture?: WheelEventHandler<HTMLAnchorElement | HTMLButtonElement
        | HTMLDivElement | BaseButton | Button | HTMLSpanElement> | undefined
      return:
        type: >-
          WheelEventHandler&lt;HTMLAnchorElement | HTMLButtonElement |
          HTMLDivElement | BaseButton | Button | HTMLSpanElement&gt; | undefined
        description: ''
  - name: open
    uid: '@azure/communication-react.ParticipantsButtonProps.open'
    package: '@azure/communication-react'
    summary: ''
    fullName: open
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'open?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: optimum
    uid: '@azure/communication-react.ParticipantsButtonProps.optimum'
    package: '@azure/communication-react'
    summary: ''
    fullName: optimum
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'optimum?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: participants
    uid: '@azure/communication-react.ParticipantsButtonProps.participants'
    package: '@azure/communication-react'
    summary: Participants in user call or chat
    fullName: participants
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'participants: CommunicationParticipant[]'
      return:
        type: '<xref uid="@azure/communication-react.CommunicationParticipant" />[]'
        description: ''
  - name: pattern
    uid: '@azure/communication-react.ParticipantsButtonProps.pattern'
    package: '@azure/communication-react'
    summary: ''
    fullName: pattern
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'pattern?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: persistMenu
    uid: '@azure/communication-react.ParticipantsButtonProps.persistMenu'
    package: '@azure/communication-react'
    summary: >
      Menu will not be created or destroyed when opened or closed, instead it

      will be hidden. This will improve perf of the menu opening but could
      potentially

      impact overall perf by having more elements in the dom. Should only be
      used

      when menu perf is important.

      Note: This may increase the amount of time it takes for the button itself
      to mount.
    fullName: persistMenu
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'persistMenu?: boolean'
      return:
        type: boolean
        description: ''
  - name: placeholder
    uid: '@azure/communication-react.ParticipantsButtonProps.placeholder'
    package: '@azure/communication-react'
    summary: ''
    fullName: placeholder
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'placeholder?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: playsInline
    uid: '@azure/communication-react.ParticipantsButtonProps.playsInline'
    package: '@azure/communication-react'
    summary: ''
    fullName: playsInline
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'playsInline?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: poster
    uid: '@azure/communication-react.ParticipantsButtonProps.poster'
    package: '@azure/communication-react'
    summary: ''
    fullName: poster
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'poster?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: prefix
    uid: '@azure/communication-react.ParticipantsButtonProps.prefix'
    package: '@azure/communication-react'
    summary: ''
    fullName: prefix
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'prefix?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: preload
    uid: '@azure/communication-react.ParticipantsButtonProps.preload'
    package: '@azure/communication-react'
    summary: ''
    fullName: preload
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'preload?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: primary
    uid: '@azure/communication-react.ParticipantsButtonProps.primary'
    package: '@azure/communication-react'
    summary: Changes the visual presentation of the button to be emphasized.
    fullName: primary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'primary?: boolean'
      return:
        type: boolean
        description: ''
  - name: primaryActionButtonProps
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.primaryActionButtonProps
    package: '@azure/communication-react'
    summary: >-
      Optional props to be applied only to the primary action button of
      SplitButton and not to the

      overall SplitButton container
    fullName: primaryActionButtonProps
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'primaryActionButtonProps?: IButtonProps'
      return:
        type: IButtonProps
        description: ''
  - name: primaryDisabled
    uid: '@azure/communication-react.ParticipantsButtonProps.primaryDisabled'
    package: '@azure/communication-react'
    summary: >-
      If set to true and this is a split button (`split` is true), the split
      button's primary action is disabled.
    fullName: primaryDisabled
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'primaryDisabled?: boolean'
      return:
        type: boolean
        description: ''
  - name: property
    uid: '@azure/communication-react.ParticipantsButtonProps.property'
    package: '@azure/communication-react'
    summary: ''
    fullName: property
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'property?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: radioGroup
    uid: '@azure/communication-react.ParticipantsButtonProps.radioGroup'
    package: '@azure/communication-react'
    summary: ''
    fullName: radioGroup
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'radioGroup?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: readOnly
    uid: '@azure/communication-react.ParticipantsButtonProps.readOnly'
    package: '@azure/communication-react'
    summary: ''
    fullName: readOnly
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readOnly?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: rel
    uid: '@azure/communication-react.ParticipantsButtonProps.rel'
    package: '@azure/communication-react'
    summary: ''
    fullName: rel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rel?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: renderPersistedMenuHiddenOnMount
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.renderPersistedMenuHiddenOnMount
    package: '@azure/communication-react'
    summary: >
      If true, the persisted menu is rendered hidden when the button initially
      mounts.

      Non-persisted menus will not be in the component tree unless they are
      being shown.

      Note: This increases the time the button will take to mount, but

      can improve perceived menu open perf. when the user opens the menu.
    fullName: renderPersistedMenuHiddenOnMount
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: |-
      There is known bug in Edge when this prop is true where scrollbars
      overlap with the content when a menu is first rendered hidden.
      Please do not start using this. If you are already using this,
      please make sure that you are doing so only in non-Edge browsers.
      See: https://github.com/microsoft/fluentui/issues/9034
    syntax:
      content: 'renderPersistedMenuHiddenOnMount?: boolean'
      return:
        type: boolean
        description: ''
  - name: required
    uid: '@azure/communication-react.ParticipantsButtonProps.required'
    package: '@azure/communication-react'
    summary: ''
    fullName: required
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'required?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: resource
    uid: '@azure/communication-react.ParticipantsButtonProps.resource'
    package: '@azure/communication-react'
    summary: ''
    fullName: resource
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'resource?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: results
    uid: '@azure/communication-react.ParticipantsButtonProps.results'
    package: '@azure/communication-react'
    summary: ''
    fullName: results
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'results?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: reversed
    uid: '@azure/communication-react.ParticipantsButtonProps.reversed'
    package: '@azure/communication-react'
    summary: ''
    fullName: reversed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'reversed?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: role
    uid: '@azure/communication-react.ParticipantsButtonProps.role'
    package: '@azure/communication-react'
    summary: ''
    fullName: role
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'role?: AriaRole | undefined'
      return:
        type: AriaRole | undefined
        description: ''
  - name: rootProps
    uid: '@azure/communication-react.ParticipantsButtonProps.rootProps'
    package: '@azure/communication-react'
    summary: ''
    fullName: rootProps
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: >-
      Deprecated at v0.56.2, to be removed at \>= v1.0.0.

      Use native props on the Button itself instead.

      They will be mixed into the button/anchor element rendered by the
      component.
    syntax:
      content: >-
        rootProps?: ButtonHTMLAttributes<HTMLButtonElement> |
        AnchorHTMLAttributes<HTMLAnchorElement>
      return:
        type: >-
          ButtonHTMLAttributes&lt;HTMLButtonElement&gt; |
          AnchorHTMLAttributes&lt;HTMLAnchorElement&gt;
        description: ''
  - name: rows
    uid: '@azure/communication-react.ParticipantsButtonProps.rows'
    package: '@azure/communication-react'
    summary: ''
    fullName: rows
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rows?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: rowSpan
    uid: '@azure/communication-react.ParticipantsButtonProps.rowSpan'
    package: '@azure/communication-react'
    summary: ''
    fullName: rowSpan
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'rowSpan?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: sandbox
    uid: '@azure/communication-react.ParticipantsButtonProps.sandbox'
    package: '@azure/communication-react'
    summary: ''
    fullName: sandbox
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sandbox?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: scope
    uid: '@azure/communication-react.ParticipantsButtonProps.scope'
    package: '@azure/communication-react'
    summary: ''
    fullName: scope
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'scope?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: scoped
    uid: '@azure/communication-react.ParticipantsButtonProps.scoped'
    package: '@azure/communication-react'
    summary: ''
    fullName: scoped
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'scoped?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: scrolling
    uid: '@azure/communication-react.ParticipantsButtonProps.scrolling'
    package: '@azure/communication-react'
    summary: ''
    fullName: scrolling
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'scrolling?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: seamless
    uid: '@azure/communication-react.ParticipantsButtonProps.seamless'
    package: '@azure/communication-react'
    summary: ''
    fullName: seamless
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'seamless?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: secondaryText
    uid: '@azure/communication-react.ParticipantsButtonProps.secondaryText'
    package: '@azure/communication-react'
    summary: |-
      Description of the action this button takes.
      Only used for compound buttons.
    fullName: secondaryText
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'secondaryText?: string'
      return:
        type: string
        description: ''
  - name: security
    uid: '@azure/communication-react.ParticipantsButtonProps.security'
    package: '@azure/communication-react'
    summary: ''
    fullName: security
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'security?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: selected
    uid: '@azure/communication-react.ParticipantsButtonProps.selected'
    package: '@azure/communication-react'
    summary: ''
    fullName: selected
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'selected?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: shape
    uid: '@azure/communication-react.ParticipantsButtonProps.shape'
    package: '@azure/communication-react'
    summary: ''
    fullName: shape
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'shape?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: showLabel
    uid: '@azure/communication-react.ParticipantsButtonProps.showLabel'
    package: '@azure/communication-react'
    summary: Whether the label is displayed or not.
    fullName: showLabel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'showLabel?: boolean'
      return:
        type: boolean
        description: ''
  - name: size
    uid: '@azure/communication-react.ParticipantsButtonProps.size'
    package: '@azure/communication-react'
    summary: ''
    fullName: size
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'size?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: sizes
    uid: '@azure/communication-react.ParticipantsButtonProps.sizes'
    package: '@azure/communication-react'
    summary: ''
    fullName: sizes
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'sizes?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: slot
    uid: '@azure/communication-react.ParticipantsButtonProps.slot'
    package: '@azure/communication-react'
    summary: ''
    fullName: slot
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'slot?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: span
    uid: '@azure/communication-react.ParticipantsButtonProps.span'
    package: '@azure/communication-react'
    summary: ''
    fullName: span
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'span?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: spellCheck
    uid: '@azure/communication-react.ParticipantsButtonProps.spellCheck'
    package: '@azure/communication-react'
    summary: ''
    fullName: spellCheck
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'spellCheck?: Booleanish | undefined'
      return:
        type: Booleanish | undefined
        description: ''
  - name: split
    uid: '@azure/communication-react.ParticipantsButtonProps.split'
    package: '@azure/communication-react'
    summary: >-
      If set to true, and if `menuProps` and `onClick` are provided, the button
      will render as a SplitButton.
    fullName: split
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'split?: boolean'
      return:
        type: boolean
        description: ''
  - name: splitButtonAriaLabel
    uid: '@azure/communication-react.ParticipantsButtonProps.splitButtonAriaLabel'
    package: '@azure/communication-react'
    summary: Accessible label for the dropdown chevron button if this button is split.
    fullName: splitButtonAriaLabel
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'splitButtonAriaLabel?: string'
      return:
        type: string
        description: ''
  - name: splitButtonMenuProps
    uid: '@azure/communication-react.ParticipantsButtonProps.splitButtonMenuProps'
    package: '@azure/communication-react'
    summary: >-
      Experimental prop that get passed into the menuButton that's rendered as
      part of

      split button. Anything passed in will likely need to have accompanying

      style changes.
    fullName: splitButtonMenuProps
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'splitButtonMenuProps?: IButtonProps'
      return:
        type: IButtonProps
        description: ''
  - name: src
    uid: '@azure/communication-react.ParticipantsButtonProps.src'
    package: '@azure/communication-react'
    summary: ''
    fullName: src
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'src?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: srcDoc
    uid: '@azure/communication-react.ParticipantsButtonProps.srcDoc'
    package: '@azure/communication-react'
    summary: ''
    fullName: srcDoc
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'srcDoc?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: srcLang
    uid: '@azure/communication-react.ParticipantsButtonProps.srcLang'
    package: '@azure/communication-react'
    summary: ''
    fullName: srcLang
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'srcLang?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: srcSet
    uid: '@azure/communication-react.ParticipantsButtonProps.srcSet'
    package: '@azure/communication-react'
    summary: ''
    fullName: srcSet
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'srcSet?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: start
    uid: '@azure/communication-react.ParticipantsButtonProps.start'
    package: '@azure/communication-react'
    summary: ''
    fullName: start
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'start?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: step
    uid: '@azure/communication-react.ParticipantsButtonProps.step'
    package: '@azure/communication-react'
    summary: ''
    fullName: step
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'step?: number | string | undefined'
      return:
        type: number | string | undefined
        description: ''
  - name: strings
    uid: '@azure/communication-react.ParticipantsButtonProps.strings'
    package: '@azure/communication-react'
    summary: Optional strings to override in component
    fullName: strings
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'strings?: Partial<ParticipantsButtonStrings>'
      return:
        type: >-
          Partial&lt;<xref
          uid="@azure/communication-react.ParticipantsButtonStrings" />&gt;
        description: ''
  - name: style
    uid: '@azure/communication-react.ParticipantsButtonProps.style'
    package: '@azure/communication-react'
    summary: ''
    fullName: style
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'style?: CSSProperties | undefined'
      return:
        type: CSSProperties | undefined
        description: ''
  - name: styles
    uid: '@azure/communication-react.ParticipantsButtonProps.styles'
    package: '@azure/communication-react'
    summary: Allows users to pass an object containing custom CSS styles.
    fullName: styles
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'styles?: ParticipantsButtonStylesProps'
      return:
        type: >-
          <xref uid="@azure/communication-react.ParticipantsButtonStylesProps"
          />
        description: ''
  - name: summary
    uid: '@azure/communication-react.ParticipantsButtonProps.summary'
    package: '@azure/communication-react'
    summary: ''
    fullName: summary
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'summary?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: suppressContentEditableWarning
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.suppressContentEditableWarning
    package: '@azure/communication-react'
    summary: ''
    fullName: suppressContentEditableWarning
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'suppressContentEditableWarning?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: suppressHydrationWarning
    uid: >-
      @azure/communication-react.ParticipantsButtonProps.suppressHydrationWarning
    package: '@azure/communication-react'
    summary: ''
    fullName: suppressHydrationWarning
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'suppressHydrationWarning?: boolean | undefined'
      return:
        type: boolean | undefined
        description: ''
  - name: tabIndex
    uid: '@azure/communication-react.ParticipantsButtonProps.tabIndex'
    package: '@azure/communication-react'
    summary: ''
    fullName: tabIndex
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'tabIndex?: number | undefined'
      return:
        type: number | undefined
        description: ''
  - name: target
    uid: '@azure/communication-react.ParticipantsButtonProps.target'
    package: '@azure/communication-react'
    summary: ''
    fullName: target
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'target?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: text
    uid: '@azure/communication-react.ParticipantsButtonProps.text'
    package: '@azure/communication-react'
    summary: >-
      Text to render button label. If text is supplied, it will override any
      string in button children.

      Other children components will be passed through after the text.
    fullName: text
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'text?: string'
      return:
        type: string
        description: ''
  - name: theme
    uid: '@azure/communication-react.ParticipantsButtonProps.theme'
    package: '@azure/communication-react'
    summary: Theme provided by HOC.
    fullName: theme
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'theme?: ITheme'
      return:
        type: ITheme
        description: ''
  - name: title
    uid: '@azure/communication-react.ParticipantsButtonProps.title'
    package: '@azure/communication-react'
    summary: ''
    fullName: title
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'title?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: toggle
    uid: '@azure/communication-react.ParticipantsButtonProps.toggle'
    package: '@azure/communication-react'
    summary: >-
      Whether button is a toggle button with distinct on and off states. This
      should be true for buttons that permanently

      change state when a press event finishes, such as a volume mute button.
    fullName: toggle
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'toggle?: boolean'
      return:
        type: boolean
        description: ''
  - name: toggled
    uid: '@azure/communication-react.ParticipantsButtonProps.toggled'
    package: '@azure/communication-react'
    summary: ''
    fullName: toggled
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: No longer used. Use `checked` if setting state.
    syntax:
      content: 'toggled?: boolean'
      return:
        type: boolean
        description: ''
  - name: translate
    uid: '@azure/communication-react.ParticipantsButtonProps.translate'
    package: '@azure/communication-react'
    summary: ''
    fullName: translate
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'translate?: "yes" | "no" | undefined'
      return:
        type: '"yes" | "no" | undefined'
        description: ''
  - name: type
    uid: '@azure/communication-react.ParticipantsButtonProps.type'
    package: '@azure/communication-react'
    summary: ''
    fullName: type
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'type?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: typeof
    uid: '@azure/communication-react.ParticipantsButtonProps.typeof'
    package: '@azure/communication-react'
    summary: ''
    fullName: typeof
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'typeof?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: uniqueId
    uid: '@azure/communication-react.ParticipantsButtonProps.uniqueId'
    package: '@azure/communication-react'
    summary: Unique ID to identify the item. Typically a duplicate of key value.
    fullName: uniqueId
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'uniqueId?: string | number'
      return:
        type: string | number
        description: ''
  - name: unselectable
    uid: '@azure/communication-react.ParticipantsButtonProps.unselectable'
    package: '@azure/communication-react'
    summary: ''
    fullName: unselectable
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'unselectable?: "on" | "off" | undefined'
      return:
        type: '"on" | "off" | undefined'
        description: ''
  - name: useMap
    uid: '@azure/communication-react.ParticipantsButtonProps.useMap'
    package: '@azure/communication-react'
    summary: ''
    fullName: useMap
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useMap?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: value
    uid: '@azure/communication-react.ParticipantsButtonProps.value'
    package: '@azure/communication-react'
    summary: ''
    fullName: value
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'value?: string | ReadonlyArray<string> | number | undefined'
      return:
        type: string | ReadonlyArray&lt;string&gt; | number | undefined
        description: ''
  - name: vocab
    uid: '@azure/communication-react.ParticipantsButtonProps.vocab'
    package: '@azure/communication-react'
    summary: ''
    fullName: vocab
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'vocab?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: width
    uid: '@azure/communication-react.ParticipantsButtonProps.width'
    package: '@azure/communication-react'
    summary: ''
    fullName: width
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'width?: number | string | undefined'
      return:
        type: number | string | undefined
        description: ''
  - name: wmode
    uid: '@azure/communication-react.ParticipantsButtonProps.wmode'
    package: '@azure/communication-react'
    summary: ''
    fullName: wmode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'wmode?: string | undefined'
      return:
        type: string | undefined
        description: ''
  - name: wrap
    uid: '@azure/communication-react.ParticipantsButtonProps.wrap'
    package: '@azure/communication-react'
    summary: ''
    fullName: wrap
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'wrap?: string | undefined'
      return:
        type: string | undefined
        description: ''
extends: <xref uid="@azure/communication-react.ControlBarButtonProps" />
