### YamlMime:TSType
name: ReportTransform
uid: '@azure/core-http.ReportTransform'
package: '@azure/core-http'
summary: ''
fullName: ReportTransform
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'ReportTransform((progress: TransferProgressEvent) => void)'
    uid: '@azure/core-http.ReportTransform.constructor'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new ReportTransform(progressCallback: (progress: TransferProgressEvent)
        => void)
      parameters:
        - id: progressCallback
          type: '(progress: TransferProgressEvent) =&gt; void'
          description: ''
properties:
  - name: allowHalfOpen
    uid: '@azure/core-http.ReportTransform.allowHalfOpen'
    package: '@azure/core-http'
    summary: >-
      If `false` then the stream will automatically end the writable side when
      the

      readable side ends. Set initially by the `allowHalfOpen` constructor
      option,

      which defaults to `false`.

      This can be changed manually to change the half-open behavior of an
      existing`Duplex` stream instance, but must be changed before the `'end'`
      event is

      emitted.
    fullName: allowHalfOpen
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'allowHalfOpen: boolean'
      return:
        type: boolean
        description: ''
  - name: destroyed
    uid: '@azure/core-http.ReportTransform.destroyed'
    package: '@azure/core-http'
    summary: Is `true` after `readable.destroy()` has been called.
    fullName: destroyed
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'destroyed: boolean'
      return:
        type: boolean
        description: ''
  - name: readable
    uid: '@azure/core-http.ReportTransform.readable'
    package: '@azure/core-http'
    summary: |-
      Is `true` if it is safe to call `readable.read()`, which means
      the stream has not been destroyed or emitted `'error'` or `'end'`.
    fullName: readable
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readable: boolean'
      return:
        type: boolean
        description: ''
  - name: readableAborted
    uid: '@azure/core-http.ReportTransform.readableAborted'
    package: '@azure/core-http'
    summary: >-
      Returns whether the stream was destroyed or errored before emitting
      `'end'`.
    fullName: readableAborted
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readableAborted: boolean'
      return:
        type: boolean
        description: ''
  - name: readableDidRead
    uid: '@azure/core-http.ReportTransform.readableDidRead'
    package: '@azure/core-http'
    summary: Returns whether `'data'` has been emitted.
    fullName: readableDidRead
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readableDidRead: boolean'
      return:
        type: boolean
        description: ''
  - name: readableEncoding
    uid: '@azure/core-http.ReportTransform.readableEncoding'
    package: '@azure/core-http'
    summary: >-
      Getter for the property `encoding` of a given `Readable` stream. The
      `encoding`property can be set using the `readable.setEncoding()` method.
    fullName: readableEncoding
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readableEncoding: BufferEncoding | null'
      return:
        type: BufferEncoding | null
        description: ''
  - name: readableEnded
    uid: '@azure/core-http.ReportTransform.readableEnded'
    package: '@azure/core-http'
    summary: Becomes `true` when `'end'` event is emitted.
    fullName: readableEnded
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readableEnded: boolean'
      return:
        type: boolean
        description: ''
  - name: readableFlowing
    uid: '@azure/core-http.ReportTransform.readableFlowing'
    package: '@azure/core-http'
    summary: >-
      This property reflects the current state of a `Readable` stream as
      described

      in the `Three states` section.
    fullName: readableFlowing
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readableFlowing: boolean | null'
      return:
        type: boolean | null
        description: ''
  - name: readableHighWaterMark
    uid: '@azure/core-http.ReportTransform.readableHighWaterMark'
    package: '@azure/core-http'
    summary: Returns the value of `highWaterMark` passed when creating this `Readable`.
    fullName: readableHighWaterMark
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readableHighWaterMark: number'
      return:
        type: number
        description: ''
  - name: readableLength
    uid: '@azure/core-http.ReportTransform.readableLength'
    package: '@azure/core-http'
    summary: |-
      This property contains the number of bytes (or objects) in the queue
      ready to be read. The value provides introspection data regarding
      the status of the `highWaterMark`.
    fullName: readableLength
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readableLength: number'
      return:
        type: number
        description: ''
  - name: readableObjectMode
    uid: '@azure/core-http.ReportTransform.readableObjectMode'
    package: '@azure/core-http'
    summary: Getter for the property `objectMode` of a given `Readable` stream.
    fullName: readableObjectMode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'readableObjectMode: boolean'
      return:
        type: boolean
        description: ''
  - name: writable
    uid: '@azure/core-http.ReportTransform.writable'
    package: '@azure/core-http'
    summary: ''
    fullName: writable
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'writable: boolean'
      return:
        type: boolean
        description: ''
  - name: writableCorked
    uid: '@azure/core-http.ReportTransform.writableCorked'
    package: '@azure/core-http'
    summary: ''
    fullName: writableCorked
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'writableCorked: number'
      return:
        type: number
        description: ''
  - name: writableEnded
    uid: '@azure/core-http.ReportTransform.writableEnded'
    package: '@azure/core-http'
    summary: ''
    fullName: writableEnded
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'writableEnded: boolean'
      return:
        type: boolean
        description: ''
  - name: writableFinished
    uid: '@azure/core-http.ReportTransform.writableFinished'
    package: '@azure/core-http'
    summary: ''
    fullName: writableFinished
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'writableFinished: boolean'
      return:
        type: boolean
        description: ''
  - name: writableHighWaterMark
    uid: '@azure/core-http.ReportTransform.writableHighWaterMark'
    package: '@azure/core-http'
    summary: ''
    fullName: writableHighWaterMark
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'writableHighWaterMark: number'
      return:
        type: number
        description: ''
  - name: writableLength
    uid: '@azure/core-http.ReportTransform.writableLength'
    package: '@azure/core-http'
    summary: ''
    fullName: writableLength
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'writableLength: number'
      return:
        type: number
        description: ''
  - name: writableObjectMode
    uid: '@azure/core-http.ReportTransform.writableObjectMode'
    package: '@azure/core-http'
    summary: ''
    fullName: writableObjectMode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'writableObjectMode: boolean'
      return:
        type: boolean
        description: ''
methods:
  - name: 'addListener("close", () => void)'
    uid: '@azure/core-http.ReportTransform.addListener'
    package: '@azure/core-http'
    summary: |-
      Event emitter
      The defined events on documents including:
      1. close
      2. data
      3. end
      4. error
      5. pause
      6. readable
      7. resume
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type: '"close"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'addListener("data", (chunk: any) => void)'
    uid: '@azure/core-http.ReportTransform.addListener_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addListener(event: "data", listener: (chunk: any) => void)'
      parameters:
        - id: event
          type: '"data"'
          description: ''
        - id: listener
          type: '(chunk: any) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'addListener("end", () => void)'
    uid: '@azure/core-http.ReportTransform.addListener_2'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addListener(event: "end", listener: () => void)'
      parameters:
        - id: event
          type: '"end"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'addListener("error", (err: Error) => void)'
    uid: '@azure/core-http.ReportTransform.addListener_3'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addListener(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: listener
          type: '(err: Error) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'addListener("pause", () => void)'
    uid: '@azure/core-http.ReportTransform.addListener_4'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addListener(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type: '"pause"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'addListener("readable", () => void)'
    uid: '@azure/core-http.ReportTransform.addListener_5'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addListener(event: "readable", listener: () => void)'
      parameters:
        - id: event
          type: '"readable"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'addListener("resume", () => void)'
    uid: '@azure/core-http.ReportTransform.addListener_6'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function addListener(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type: '"resume"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-http.ReportTransform.addListener_7'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addListener(event: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: cork()
    uid: '@azure/core-http.ReportTransform.cork'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function cork()
  - name: destroy(Error)
    uid: '@azure/core-http.ReportTransform.destroy'
    package: '@azure/core-http'
    summary: >-
      Destroy the stream. Optionally emit an `'error'` event, and emit a
      `'close'`event (unless `emitClose` is set to `false`). After this call,
      the readable

      stream will release any internal resources and subsequent calls to
      `push()`will be ignored.

      Once `destroy()` has been called any further calls will be a no-op and no

      further errors except from `_destroy()` may be emitted as `'error'`.


      Implementors should not override this method, but instead implement
      `readable._destroy()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function destroy(error?: Error)'
      parameters:
        - id: error
          type: Error
          description: |
            Error which will be passed as payload in `'error'` event
  - name: emit("close")
    uid: '@azure/core-http.ReportTransform.emit'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: "close")'
      parameters:
        - id: event
          type: '"close"'
          description: ''
      return:
        type: boolean
        description: ''
  - name: 'emit("data", any)'
    uid: '@azure/core-http.ReportTransform.emit_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: "data", chunk: any)'
      parameters:
        - id: event
          type: '"data"'
          description: ''
        - id: chunk
          type: any
          description: ''
      return:
        type: boolean
        description: ''
  - name: emit("end")
    uid: '@azure/core-http.ReportTransform.emit_2'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: "end")'
      parameters:
        - id: event
          type: '"end"'
          description: ''
      return:
        type: boolean
        description: ''
  - name: 'emit("error", Error)'
    uid: '@azure/core-http.ReportTransform.emit_3'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: "error", err: Error)'
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: err
          type: Error
          description: ''
      return:
        type: boolean
        description: ''
  - name: emit("pause")
    uid: '@azure/core-http.ReportTransform.emit_4'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: "pause")'
      parameters:
        - id: event
          type: '"pause"'
          description: ''
      return:
        type: boolean
        description: ''
  - name: emit("readable")
    uid: '@azure/core-http.ReportTransform.emit_5'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: "readable")'
      parameters:
        - id: event
          type: '"readable"'
          description: ''
      return:
        type: boolean
        description: ''
  - name: emit("resume")
    uid: '@azure/core-http.ReportTransform.emit_6'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: "resume")'
      parameters:
        - id: event
          type: '"resume"'
          description: ''
      return:
        type: boolean
        description: ''
  - name: 'emit(string | symbol, any[])'
    uid: '@azure/core-http.ReportTransform.emit_7'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(event: string | symbol, args: any[])'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        type: boolean
        description: ''
  - name: end(() => void)
    uid: '@azure/core-http.ReportTransform.end'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function end(cb?: () => void)'
      parameters:
        - id: cb
          type: () =&gt; void
          description: ''
  - name: 'end(any, () => void)'
    uid: '@azure/core-http.ReportTransform.end_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function end(chunk: any, cb?: () => void)'
      parameters:
        - id: chunk
          type: any
          description: ''
        - id: cb
          type: () =&gt; void
          description: ''
  - name: 'end(any, BufferEncoding, () => void)'
    uid: '@azure/core-http.ReportTransform.end_2'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function end(chunk: any, encoding?: BufferEncoding, cb?: () => void)'
      parameters:
        - id: chunk
          type: any
          description: ''
        - id: encoding
          type: BufferEncoding
          description: ''
        - id: cb
          type: () =&gt; void
          description: ''
  - name: eventNames()
    uid: '@azure/core-http.ReportTransform.eventNames'
    package: '@azure/core-http'
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function eventNames()
      return:
        type: Array&lt;string | symbol&gt;
        description: ''
  - name: >-
      from(Stream | Blob | ArrayBuffer | string | Iterable<any> |
      AsyncIterable<any> | AsyncGeneratorFunction | Promise<any> | Object)
    uid: '@azure/core-http.ReportTransform.from'
    package: '@azure/core-http'
    summary: >
      A utility method for creating duplex streams.

      - `Stream` converts writable stream into writable `Duplex` and readable
      stream
        to `Duplex`.
      - `Blob` converts into readable `Duplex`.

      - `string` converts into readable `Duplex`.

      - `ArrayBuffer` converts into readable `Duplex`.

      - `AsyncIterable` converts into a readable `Duplex`. Cannot yield `null`.

      - `AsyncGeneratorFunction` converts into a readable/writable transform
        `Duplex`. Must take a source `AsyncIterable` as first parameter. Cannot yield
        `null`.
      - `AsyncFunction` converts into a writable `Duplex`. Must return
        either `null` or `undefined`
      - `Object ({ writable, readable })` converts `readable` and
        `writable` into `Stream` and then combines them into `Duplex` where the
        `Duplex` will write to the `writable` and read from the `readable`.
      - `Promise` converts into readable `Duplex`. Value `null` is ignored.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function from(src: Stream | Blob | ArrayBuffer | string |
        Iterable<any> | AsyncIterable<any> | AsyncGeneratorFunction |
        Promise<any> | Object)
      parameters:
        - id: src
          type: >-
            Stream | Blob | ArrayBuffer | string | Iterable&lt;any&gt; |
            AsyncIterable&lt;any&gt; | AsyncGeneratorFunction |
            Promise&lt;any&gt; | Object
          description: ''
      return:
        type: Duplex
        description: ''
  - name: getMaxListeners()
    uid: '@azure/core-http.ReportTransform.getMaxListeners'
    package: '@azure/core-http'
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getMaxListeners()
      return:
        type: number
        description: ''
  - name: isDisturbed(Readable | ReadableStream)
    uid: '@azure/core-http.ReportTransform.isDisturbed'
    package: '@azure/core-http'
    summary: Returns whether the stream has been read from or cancelled.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static function isDisturbed(stream: Readable | ReadableStream)'
      parameters:
        - id: stream
          type: Readable | ReadableStream
          description: ''
      return:
        type: boolean
        description: ''
  - name: isPaused()
    uid: '@azure/core-http.ReportTransform.isPaused'
    package: '@azure/core-http'
    summary: >-
      The `readable.isPaused()` method returns the current operating state of
      the`Readable`. This is used primarily by the mechanism that underlies
      the`readable.pipe()` method. In most

      typical cases, there will be no reason to

      use this method directly.

      ```js

      const readable = new stream.Readable();


      readable.isPaused(); // === false

      readable.pause();

      readable.isPaused(); // === true

      readable.resume();

      readable.isPaused(); // === false

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function isPaused()
      return:
        type: boolean
        description: ''
  - name: listenerCount(string | symbol)
    uid: '@azure/core-http.ReportTransform.listenerCount'
    package: '@azure/core-http'
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: |
            The name of the event being listened for
      return:
        type: number
        description: ''
  - name: listeners(string | symbol)
    uid: '@azure/core-http.ReportTransform.listeners'
    package: '@azure/core-http'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-http.ReportTransform.off'
    package: '@azure/core-http'
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'on("close", () => void)'
    uid: '@azure/core-http.ReportTransform.on'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "close", listener: () => void)'
      parameters:
        - id: event
          type: '"close"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'on("data", (chunk: any) => void)'
    uid: '@azure/core-http.ReportTransform.on_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "data", listener: (chunk: any) => void)'
      parameters:
        - id: event
          type: '"data"'
          description: ''
        - id: listener
          type: '(chunk: any) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'on("end", () => void)'
    uid: '@azure/core-http.ReportTransform.on_2'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "end", listener: () => void)'
      parameters:
        - id: event
          type: '"end"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'on("error", (err: Error) => void)'
    uid: '@azure/core-http.ReportTransform.on_3'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: listener
          type: '(err: Error) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'on("pause", () => void)'
    uid: '@azure/core-http.ReportTransform.on_4'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type: '"pause"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'on("readable", () => void)'
    uid: '@azure/core-http.ReportTransform.on_5'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "readable", listener: () => void)'
      parameters:
        - id: event
          type: '"readable"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'on("resume", () => void)'
    uid: '@azure/core-http.ReportTransform.on_6'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type: '"resume"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-http.ReportTransform.on_7'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'once("close", () => void)'
    uid: '@azure/core-http.ReportTransform.once'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: "close", listener: () => void)'
      parameters:
        - id: event
          type: '"close"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'once("data", (chunk: any) => void)'
    uid: '@azure/core-http.ReportTransform.once_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: "data", listener: (chunk: any) => void)'
      parameters:
        - id: event
          type: '"data"'
          description: ''
        - id: listener
          type: '(chunk: any) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'once("end", () => void)'
    uid: '@azure/core-http.ReportTransform.once_2'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: "end", listener: () => void)'
      parameters:
        - id: event
          type: '"end"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'once("error", (err: Error) => void)'
    uid: '@azure/core-http.ReportTransform.once_3'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: listener
          type: '(err: Error) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'once("pause", () => void)'
    uid: '@azure/core-http.ReportTransform.once_4'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type: '"pause"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'once("readable", () => void)'
    uid: '@azure/core-http.ReportTransform.once_5'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: "readable", listener: () => void)'
      parameters:
        - id: event
          type: '"readable"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'once("resume", () => void)'
    uid: '@azure/core-http.ReportTransform.once_6'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type: '"resume"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-http.ReportTransform.once_7'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function once(event: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: pause()
    uid: '@azure/core-http.ReportTransform.pause'
    package: '@azure/core-http'
    summary: >-
      The `readable.pause()` method will cause a stream in flowing mode to stop

      emitting `'data'` events, switching out of flowing mode. Any data that

      becomes available will remain in the internal buffer.

      ```js

      const readable = getReadableStreamSomehow();

      readable.on('data', (chunk) => {
        console.log(`Received ${chunk.length} bytes of data.`);
        readable.pause();
        console.log('There will be no additional data for 1 second.');
        setTimeout(() => {
          console.log('Now data will start flowing again.');
          readable.resume();
        }, 1000);
      });

      ```


      The `readable.pause()` method has no effect if there is a
      `'readable'`event listener.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function pause()
      return:
        type: this
        description: ''
  - name: 'pipe<T>(T, Object)'
    uid: '@azure/core-http.ReportTransform.pipe'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function pipe<T>(destination: T, options?: Object)'
      parameters:
        - id: destination
          type: T
          description: ''
        - id: options
          type: Object
          description: ''
      return:
        type: T
        description: ''
  - name: 'prependListener("close", () => void)'
    uid: '@azure/core-http.ReportTransform.prependListener'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type: '"close"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependListener("data", (chunk: any) => void)'
    uid: '@azure/core-http.ReportTransform.prependListener_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependListener(event: "data", listener: (chunk: any) => void)'
      parameters:
        - id: event
          type: '"data"'
          description: ''
        - id: listener
          type: '(chunk: any) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependListener("end", () => void)'
    uid: '@azure/core-http.ReportTransform.prependListener_2'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependListener(event: "end", listener: () => void)'
      parameters:
        - id: event
          type: '"end"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependListener("error", (err: Error) => void)'
    uid: '@azure/core-http.ReportTransform.prependListener_3'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependListener(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: listener
          type: '(err: Error) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependListener("pause", () => void)'
    uid: '@azure/core-http.ReportTransform.prependListener_4'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependListener(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type: '"pause"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependListener("readable", () => void)'
    uid: '@azure/core-http.ReportTransform.prependListener_5'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependListener(event: "readable", listener: () => void)'
      parameters:
        - id: event
          type: '"readable"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependListener("resume", () => void)'
    uid: '@azure/core-http.ReportTransform.prependListener_6'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependListener(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type: '"resume"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-http.ReportTransform.prependListener_7'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependOnceListener("close", () => void)'
    uid: '@azure/core-http.ReportTransform.prependOnceListener'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependOnceListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type: '"close"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependOnceListener("data", (chunk: any) => void)'
    uid: '@azure/core-http.ReportTransform.prependOnceListener_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(event: "data", listener: (chunk: any) =>
        void)
      parameters:
        - id: event
          type: '"data"'
          description: ''
        - id: listener
          type: '(chunk: any) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependOnceListener("end", () => void)'
    uid: '@azure/core-http.ReportTransform.prependOnceListener_2'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependOnceListener(event: "end", listener: () => void)'
      parameters:
        - id: event
          type: '"end"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependOnceListener("error", (err: Error) => void)'
    uid: '@azure/core-http.ReportTransform.prependOnceListener_3'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(event: "error", listener: (err: Error) =>
        void)
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: listener
          type: '(err: Error) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependOnceListener("pause", () => void)'
    uid: '@azure/core-http.ReportTransform.prependOnceListener_4'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependOnceListener(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type: '"pause"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependOnceListener("readable", () => void)'
    uid: '@azure/core-http.ReportTransform.prependOnceListener_5'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependOnceListener(event: "readable", listener: () => void)'
      parameters:
        - id: event
          type: '"readable"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependOnceListener("resume", () => void)'
    uid: '@azure/core-http.ReportTransform.prependOnceListener_6'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function prependOnceListener(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type: '"resume"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-http.ReportTransform.prependOnceListener_7'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(event: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'push(any, BufferEncoding)'
    uid: '@azure/core-http.ReportTransform.push'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function push(chunk: any, encoding?: BufferEncoding)'
      parameters:
        - id: chunk
          type: any
          description: ''
        - id: encoding
          type: BufferEncoding
          description: ''
      return:
        type: boolean
        description: ''
  - name: rawListeners(string | symbol)
    uid: '@azure/core-http.ReportTransform.rawListeners'
    package: '@azure/core-http'
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: read(number)
    uid: '@azure/core-http.ReportTransform.read'
    package: '@azure/core-http'
    summary: >-
      The `readable.read()` method pulls some data out of the internal buffer
      and

      returns it. If no data available to be read, `null` is returned. By
      default,

      the data will be returned as a `Buffer` object unless an encoding has been

      specified using the `readable.setEncoding()` method or the stream is
      operating

      in object mode.

      The optional `size` argument specifies a specific number of bytes to read.
      If`size` bytes are not available to be read, `null` will be returned
      _unless_the stream has ended, in which

      case all of the data remaining in the internal

      buffer will be returned.


      If the `size` argument is not specified, all of the data contained in the

      internal buffer will be returned.


      The `size` argument must be less than or equal to 1 GiB.


      The `readable.read()` method should only be called on `Readable` streams

      operating in paused mode. In flowing mode, `readable.read()` is called

      automatically until the internal buffer is fully drained.


      ```js

      const readable = getReadableStreamSomehow();


      // 'readable' may be triggered multiple times as data is buffered in

      readable.on('readable', () => {
        let chunk;
        console.log('Stream is readable (new data received in buffer)');
        // Use a loop to make sure we read all currently available data
        while (null !== (chunk = readable.read())) {
          console.log(`Read ${chunk.length} bytes of data...`);
        }
      });


      // 'end' will be triggered once when there is no more data available

      readable.on('end', () => {
        console.log('Reached end of stream.');
      });

      ```


      Each call to `readable.read()` returns a chunk of data, or `null`. The
      chunks

      are not concatenated. A `while` loop is necessary to consume all data

      currently in the buffer. When reading a large file `.read()` may return
      `null`,

      having consumed all buffered content so far, but there is still more data
      to

      come not yet buffered. In this case a new `'readable'` event will be
      emitted

      when there is more data in the buffer. Finally the `'end'` event will be

      emitted when there is no more data to come.


      Therefore to read a file's whole contents from a `readable`, it is
      necessary

      to collect chunks across multiple `'readable'` events:


      ```js

      const chunks = [];


      readable.on('readable', () => {
        let chunk;
        while (null !== (chunk = readable.read())) {
          chunks.push(chunk);
        }
      });


      readable.on('end', () => {
        const content = chunks.join('');
      });

      ```


      A `Readable` stream in object mode will always return a single item from

      a call to `readable.read(size)`, regardless of the value of the`size`
      argument.


      If the `readable.read()` method returns a chunk of data, a `'data'` event
      will

      also be emitted.


      Calling <xref:read> after the `'end'` event has

      been emitted will return `null`. No runtime error will be raised.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function read(size?: number)'
      parameters:
        - id: size
          type: number
          description: |
            Optional argument to specify how much data to read.
      return:
        type: any
        description: ''
  - name: removeAllListeners(string | symbol)
    uid: '@azure/core-http.ReportTransform.removeAllListeners'
    package: '@azure/core-http'
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener("close", () => void)'
    uid: '@azure/core-http.ReportTransform.removeListener'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: "close", listener: () => void)'
      parameters:
        - id: event
          type: '"close"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener("data", (chunk: any) => void)'
    uid: '@azure/core-http.ReportTransform.removeListener_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: "data", listener: (chunk: any) => void)'
      parameters:
        - id: event
          type: '"data"'
          description: ''
        - id: listener
          type: '(chunk: any) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener("end", () => void)'
    uid: '@azure/core-http.ReportTransform.removeListener_2'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: "end", listener: () => void)'
      parameters:
        - id: event
          type: '"end"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener("error", (err: Error) => void)'
    uid: '@azure/core-http.ReportTransform.removeListener_3'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: "error", listener: (err: Error) => void)'
      parameters:
        - id: event
          type: '"error"'
          description: ''
        - id: listener
          type: '(err: Error) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener("pause", () => void)'
    uid: '@azure/core-http.ReportTransform.removeListener_4'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: "pause", listener: () => void)'
      parameters:
        - id: event
          type: '"pause"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener("readable", () => void)'
    uid: '@azure/core-http.ReportTransform.removeListener_5'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: "readable", listener: () => void)'
      parameters:
        - id: event
          type: '"readable"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener("resume", () => void)'
    uid: '@azure/core-http.ReportTransform.removeListener_6'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeListener(event: "resume", listener: () => void)'
      parameters:
        - id: event
          type: '"resume"'
          description: ''
        - id: listener
          type: () =&gt; void
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: '@azure/core-http.ReportTransform.removeListener_7'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(event: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: event
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: resume()
    uid: '@azure/core-http.ReportTransform.resume'
    package: '@azure/core-http'
    summary: >-
      The `readable.resume()` method causes an explicitly paused `Readable`
      stream to

      resume emitting `'data'` events, switching the stream into flowing mode.

      The `readable.resume()` method can be used to fully consume the data from
      a

      stream without actually processing any of that data:


      ```js

      getReadableStreamSomehow()
        .resume()
        .on('end', () => {
          console.log('Reached the end, but did not read anything.');
        });
      ```


      The `readable.resume()` method has no effect if there is a
      `'readable'`event listener.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function resume()
      return:
        type: this
        description: ''
  - name: setDefaultEncoding(BufferEncoding)
    uid: '@azure/core-http.ReportTransform.setDefaultEncoding'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setDefaultEncoding(encoding: BufferEncoding)'
      parameters:
        - id: encoding
          type: BufferEncoding
          description: ''
      return:
        type: this
        description: ''
  - name: setEncoding(BufferEncoding)
    uid: '@azure/core-http.ReportTransform.setEncoding'
    package: '@azure/core-http'
    summary: >-
      The `readable.setEncoding()` method sets the character encoding for

      data read from the `Readable` stream.

      By default, no encoding is assigned and stream data will be returned
      as`Buffer` objects. Setting an encoding causes the stream data

      to be returned as strings of the specified encoding rather than as
      `Buffer`objects. For instance, calling `readable.setEncoding('utf8')` will
      cause the

      output data to be interpreted as UTF-8 data, and passed as strings.
      Calling`readable.setEncoding('hex')` will cause the data to be encoded in
      hexadecimal

      string format.


      The `Readable` stream will properly handle multi-byte characters delivered

      through the stream that would otherwise become improperly decoded if
      simply

      pulled from the stream as `Buffer` objects.


      ```js

      const readable = getReadableStreamSomehow();

      readable.setEncoding('utf8');

      readable.on('data', (chunk) => {
        assert.equal(typeof chunk, 'string');
        console.log('Got %d characters of string data:', chunk.length);
      });

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setEncoding(encoding: BufferEncoding)'
      parameters:
        - id: encoding
          type: BufferEncoding
          description: |
            The encoding to use.
      return:
        type: this
        description: ''
  - name: setMaxListeners(number)
    uid: '@azure/core-http.ReportTransform.setMaxListeners'
    package: '@azure/core-http'
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        type: this
        description: ''
  - name: uncork()
    uid: '@azure/core-http.ReportTransform.uncork'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function uncork()
  - name: unpipe(WritableStream)
    uid: '@azure/core-http.ReportTransform.unpipe'
    package: '@azure/core-http'
    summary: >-
      The `readable.unpipe()` method detaches a `Writable` stream previously
      attached

      using the <xref:pipe> method.

      If the `destination` is not specified, then _all_ pipes are detached.


      If the `destination` is specified, but no pipe is set up for it, then

      the method does nothing.


      ```js

      const fs = require('fs');

      const readable = getReadableStreamSomehow();

      const writable = fs.createWriteStream('file.txt');

      // All the data from readable goes into 'file.txt',

      // but only for the first second.

      readable.pipe(writable);

      setTimeout(() => {
        console.log('Stop writing to file.txt.');
        readable.unpipe(writable);
        console.log('Manually close the file stream.');
        writable.end();
      }, 1000);

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function unpipe(destination?: WritableStream)'
      parameters:
        - id: destination
          type: WritableStream
          description: |
            Optional specific stream to unpipe
      return:
        type: this
        description: ''
  - name: 'unshift(any, BufferEncoding)'
    uid: '@azure/core-http.ReportTransform.unshift'
    package: '@azure/core-http'
    summary: >-
      Passing `chunk` as `null` signals the end of the stream (EOF) and behaves
      the

      same as `readable.push(null)`, after which no more data can be written.
      The EOF

      signal is put at the end of the buffer and any buffered data will still be

      flushed.

      The `readable.unshift()` method pushes a chunk of data back into the
      internal

      buffer. This is useful in certain situations where a stream is being
      consumed by

      code that needs to "un-consume" some amount of data that it has
      optimistically

      pulled out of the source, so that the data can be passed on to some other
      party.


      The `stream.unshift(chunk)` method cannot be called after the `'end'`
      event

      has been emitted or a runtime error will be thrown.


      Developers using `stream.unshift()` often should consider switching to

      use of a `Transform` stream instead. See the `API for stream implementers`
      section for more information.


      ```js

      // Pull off a header delimited by \n\n.

      // Use unshift() if we get too much.

      // Call the callback with (error, header, stream).

      const { StringDecoder } = require('string_decoder');

      function parseHeader(stream, callback) {
        stream.on('error', callback);
        stream.on('readable', onReadable);
        const decoder = new StringDecoder('utf8');
        let header = '';
        function onReadable() {
          let chunk;
          while (null !== (chunk = stream.read())) {
            const str = decoder.write(chunk);
            if (str.match(/\n\n/)) {
              // Found the header boundary.
              const split = str.split(/\n\n/);
              header += split.shift();
              const remaining = split.join('\n\n');
              const buf = Buffer.from(remaining, 'utf8');
              stream.removeListener('error', callback);
              // Remove the 'readable' listener before unshifting.
              stream.removeListener('readable', onReadable);
              if (buf.length)
                stream.unshift(buf);
              // Now the body of the message can be read from the stream.
              callback(null, header, stream);
            } else {
              // Still reading the header.
              header += str;
            }
          }
        }
      }

      ```


      Unlike <xref:push>, `stream.unshift(chunk)` will not

      end the reading process by resetting the internal reading state of the
      stream.

      This can cause unexpected results if `readable.unshift()` is called during
      a

      read (i.e. from within a <xref:_read> implementation on a

      custom stream). Following the call to `readable.unshift()` with an
      immediate <xref:push> will reset the reading state appropriately,

      however it is best to simply avoid calling `readable.unshift()` while in
      the

      process of performing a read.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function unshift(chunk: any, encoding?: BufferEncoding)'
      parameters:
        - id: chunk
          type: any
          description: >-
            Chunk of data to unshift onto the read queue. For streams not
            operating in object mode, `chunk` must be a string, `Buffer`,
            `Uint8Array` or `null`. For object mode

            streams, `chunk` may be any JavaScript value.
        - id: encoding
          type: BufferEncoding
          description: >
            Encoding of string chunks. Must be a valid `Buffer` encoding, such
            as `'utf8'` or `'ascii'`.
  - name: wrap(ReadableStream)
    uid: '@azure/core-http.ReportTransform.wrap'
    package: '@azure/core-http'
    summary: >-
      Prior to Node.js 0.10, streams did not implement the entire `stream`
      module API

      as it is currently defined. (See `Compatibility` for more information.)

      When using an older Node.js library that emits `'data'` events and has a
      <xref:pause> method that is advisory only, the`readable.wrap()` method can
      be used to create a `Readable`

      stream that uses

      the old stream as its data source.


      It will rarely be necessary to use `readable.wrap()` but the method has
      been

      provided as a convenience for interacting with older Node.js applications
      and

      libraries.


      ```js

      const { OldReader } = require('./old-api-module.js');

      const { Readable } = require('stream');

      const oreader = new OldReader();

      const myReader = new Readable().wrap(oreader);


      myReader.on('readable', () => {
        myReader.read(); // etc.
      });

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function wrap(stream: ReadableStream)'
      parameters:
        - id: stream
          type: ReadableStream
          description: |
            An "old style" readable stream
      return:
        type: this
        description: ''
  - name: 'write(any, (error: Error | null | undefined) => void)'
    uid: '@azure/core-http.ReportTransform.write_1'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function write(chunk: any, cb?: (error: Error | null | undefined) =>
        void)
      parameters:
        - id: chunk
          type: any
          description: ''
        - id: cb
          type: '(error: Error | null | undefined) =&gt; void'
          description: ''
      return:
        type: boolean
        description: ''
  - name: 'write(any, BufferEncoding, (error: Error | null | undefined) => void)'
    uid: '@azure/core-http.ReportTransform.write'
    package: '@azure/core-http'
    summary: ''
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function write(chunk: any, encoding?: BufferEncoding, cb?: (error: Error
        | null | undefined) => void)
      parameters:
        - id: chunk
          type: any
          description: ''
        - id: encoding
          type: BufferEncoding
          description: ''
        - id: cb
          type: '(error: Error | null | undefined) =&gt; void'
          description: ''
      return:
        type: boolean
        description: ''
extends: Transform
