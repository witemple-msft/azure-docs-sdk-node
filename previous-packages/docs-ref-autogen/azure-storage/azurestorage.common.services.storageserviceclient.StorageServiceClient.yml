### YamlMime:TSType
name: StorageServiceClient
uid: >-
  azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient
package: azure-storage
summary: ''
fullName: StorageServiceClient
remarks: ''
isPreview: false
isDeprecated: false
type: class
constructors:
  - name: 'StorageServiceClient(string, string, StorageHost, boolean, string)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.constructor
    package: azure-storage
    summary: Creates a new StorageServiceClient object.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        new StorageServiceClient(storageAccount?: string, storageAccessKey?:
        string, host?: StorageHost, usePathStyleUri?: boolean, sasToken?:
        string)
      parameters:
        - id: storageAccount
          type: string
          description: The storage account.
        - id: storageAccessKey
          type: string
          description: The storage access key.
        - id: host
          type: <xref uid="azure-storage.azurestorage.StorageHost" />
          description: The host for the service.
        - id: usePathStyleUri
          type: boolean
          description: Boolean value indicating wether to use path style uris.
        - id: sasToken
          type: string
          description: |
            The Shared Access Signature token.
properties:
  - name: captureRejections
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.captureRejections
    package: azure-storage
    summary: Sets or gets the default captureRejection value for all emitters.
    fullName: captureRejections
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static captureRejections: boolean'
      return:
        type: boolean
        description: ''
  - name: captureRejectionSymbol
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.captureRejectionSymbol
    package: azure-storage
    summary: ''
    fullName: captureRejectionSymbol
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static captureRejectionSymbol: Object'
      return:
        type: Object
        description: ''
  - name: defaultClientRequestTimeoutInMs
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.defaultClientRequestTimeoutInMs
    package: azure-storage
    summary: >-
      The default timeout of client requests, in milliseconds, to use for the
      request.
    fullName: defaultClientRequestTimeoutInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultClientRequestTimeoutInMs: number'
      return:
        type: number
        description: ''
  - name: defaultLocationMode
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.defaultLocationMode
    package: azure-storage
    summary: The default location mode for requests made via the service.
    fullName: defaultLocationMode
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultLocationMode: LocationMode'
      return:
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.util.storageutilities.LocationMode"
          />
        description: ''
  - name: defaultMaximumExecutionTimeInMs
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.defaultMaximumExecutionTimeInMs
    package: azure-storage
    summary: >-
      The default maximum execution time across all potential retries, for
      requests made via the service.
    fullName: defaultMaximumExecutionTimeInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultMaximumExecutionTimeInMs: number'
      return:
        type: number
        description: ''
  - name: defaultMaxListeners
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.defaultMaxListeners
    package: azure-storage
    summary: ''
    fullName: defaultMaxListeners
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static defaultMaxListeners: number'
      return:
        type: number
        description: ''
  - name: defaultTimeoutIntervalInMs
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.defaultTimeoutIntervalInMs
    package: azure-storage
    summary: >-
      The default timeout interval, in milliseconds, to use for request made via
      the service.
    fullName: defaultTimeoutIntervalInMs
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'defaultTimeoutIntervalInMs: number'
      return:
        type: number
        description: ''
  - name: enableGlobalHttpAgent
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.enableGlobalHttpAgent
    package: azure-storage
    summary: >-
      Determines whether global HTTP(s) agent is enabled; true to use Global
      HTTP(s) agent; otherwise, false to use

      http(s).Agent({keepAlive:true}).
    fullName: enableGlobalHttpAgent
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'enableGlobalHttpAgent: boolean'
      return:
        type: boolean
        description: ''
  - name: errorMonitor
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.errorMonitor
    package: azure-storage
    summary: >
      This symbol shall be used to install a listener for only monitoring
      `'error'`

      events. Listeners installed using this symbol are called before the
      regular

      `'error'` listeners are called.

      Installing a listener using this symbol does not change the behavior once
      an

      `'error'` event is emitted, therefore the process will still crash if no

      regular `'error'` listener is installed.
    fullName: errorMonitor
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'static errorMonitor: Object'
      return:
        type: Object
        description: ''
  - name: host
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.host
    package: azure-storage
    summary: The host information for the service.
    fullName: host
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'host: StorageHost'
      return:
        type: <xref uid="azure-storage.azurestorage.StorageHost" />
        description: ''
  - name: logger
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.logger
    package: azure-storage
    summary: The logging settings object.
    fullName: logger
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'logger: Logger'
      return:
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.diagnostics.logger.Logger" />
        description: ''
  - name: proxy
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.proxy
    package: azure-storage
    summary: The proxy object specified by caller.
    fullName: proxy
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'proxy: Proxy'
      return:
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.services.storageserviceclient.Proxy"
          />
        description: ''
  - name: useNagleAlgorithm
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.useNagleAlgorithm
    package: azure-storage
    summary: >-
      Determines whether the Nagle algorithm is used for requests made via the
      Queue service; true to use the

      Nagle algorithm; otherwise, false. The default value is false.
    fullName: useNagleAlgorithm
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'useNagleAlgorithm: boolean'
      return:
        type: boolean
        description: ''
methods:
  - name: 'addListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.addListener
    package: azure-storage
    summary: 'Alias for `emitter.on(eventName, listener)`.'
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function addListener(eventName: string | symbol, listener: (args: any[])
        => void)
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'emit(string | symbol, any[])'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.emit
    package: azure-storage
    summary: >-
      Synchronously calls each of the listeners registered for the event
      named`eventName`, in the order they were registered, passing the supplied
      arguments

      to each.

      Returns `true` if the event had listeners, `false` otherwise.


      ```js

      const EventEmitter = require('events');

      const myEmitter = new EventEmitter();


      // First listener

      myEmitter.on('event', function firstListener() {
        console.log('Helloooo! first listener');
      });

      // Second listener

      myEmitter.on('event', function secondListener(arg1, arg2) {
        console.log(`event with parameters ${arg1}, ${arg2} in second listener`);
      });

      // Third listener

      myEmitter.on('event', function thirdListener(...args) {
        const parameters = args.join(', ');
        console.log(`event with parameters ${parameters} in third listener`);
      });


      console.log(myEmitter.listeners('event'));


      myEmitter.emit('event', 1, 2, 3, 4, 5);


      // Prints:

      // [

      //   [Function: firstListener],

      //   [Function: secondListener],

      //   [Function: thirdListener]

      // ]

      // Helloooo! first listener

      // event with parameters 1, 2 in second listener

      // event with parameters 1, 2, 3, 4, 5 in third listener

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function emit(eventName: string | symbol, args: any[])'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: args
          type: 'any[]'
          description: ''
      return:
        type: boolean
        description: ''
  - name: eventNames()
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.eventNames
    package: azure-storage
    summary: |-
      Returns an array listing the events for which the emitter has registered
      listeners. The values in the array are strings or `Symbol`s.
      ```js
      const EventEmitter = require('events');
      const myEE = new EventEmitter();
      myEE.on('foo', () => {});
      myEE.on('bar', () => {});

      const sym = Symbol('symbol');
      myEE.on(sym, () => {});

      console.log(myEE.eventNames());
      // Prints: [ 'foo', 'bar', Symbol(symbol) ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function eventNames()
      return:
        type: Array&lt;string | symbol&gt;
        description: ''
  - name: 'getEventListeners(DOMEventTarget | EventEmitter, string | symbol)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.getEventListeners
    package: azure-storage
    summary: >-
      Returns a copy of the array of listeners for the event named `eventName`.

      For `EventEmitter`s this behaves exactly the same as calling `.listeners`
      on

      the emitter.


      For `EventTarget`s this is the only way to get the event listeners for the

      event target. This is useful for debugging and diagnostic purposes.


      ```js

      const { getEventListeners, EventEmitter } = require('events');


      {
        const ee = new EventEmitter();
        const listener = () => console.log('Events are fun');
        ee.on('foo', listener);
        getEventListeners(ee, 'foo'); // [listener]
      }

      {
        const et = new EventTarget();
        const listener = () => console.log('Events are fun');
        et.addEventListener('foo', listener);
        getEventListeners(et, 'foo'); // [listener]
      }

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function getEventListeners(emitter: DOMEventTarget |
        EventEmitter, name: string | symbol)
      parameters:
        - id: emitter
          type: DOMEventTarget | EventEmitter
          description: ''
        - id: name
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: getMaxListeners()
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.getMaxListeners
    package: azure-storage
    summary: >-
      Returns the current max listener value for the `EventEmitter` which is
      either

      set by `emitter.setMaxListeners(n)` or defaults to
      <xref:defaultMaxListeners>.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: function getMaxListeners()
      return:
        type: number
        description: ''
  - name: 'listenerCount(EventEmitter, string | symbol)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.listenerCount
    package: azure-storage
    summary: >-
      A class method that returns the number of listeners for the given
      `eventName`registered on the given `emitter`.

      ```js

      const { EventEmitter, listenerCount } = require('events');

      const myEmitter = new EventEmitter();

      myEmitter.on('event', () => {});

      myEmitter.on('event', () => {});

      console.log(listenerCount(myEmitter, 'event'));

      // Prints: 2

      ```
    remarks: ''
    isPreview: false
    isDeprecated: true
    customDeprecatedMessage: Since v3.2.0 - Use `listenerCount` instead.
    syntax:
      content: >-
        static function listenerCount(emitter: EventEmitter, eventName: string |
        symbol)
      parameters:
        - id: emitter
          type: EventEmitter
          description: The emitter to query
        - id: eventName
          type: string | symbol
          description: |
            The event name
      return:
        type: number
        description: ''
  - name: listenerCount(string | symbol)
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.listenerCount
    package: azure-storage
    summary: Returns the number of listeners listening to the event named `eventName`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listenerCount(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: |
            The name of the event being listened for
      return:
        type: number
        description: ''
  - name: listeners(string | symbol)
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.listeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`.
      ```js
      server.on('connection', (stream) => {
        console.log('someone connected!');
      });
      console.log(util.inspect(server.listeners('connection')));
      // Prints: [ [Function] ]
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function listeners(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: 'off(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.off
    package: azure-storage
    summary: Alias for `emitter.removeListener()`.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function off(eventName: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: 'on(EventEmitter, string, StaticEventEmitterOptions)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.on
    package: azure-storage
    summary: |-
      ```js
      const { on, EventEmitter } = require('events');
      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo')) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();
      ```

      Returns an `AsyncIterator` that iterates `eventName` events. It will throw
      if the `EventEmitter` emits `'error'`. It removes all listeners when
      exiting the loop. The `value` returned by each iteration is an array
      composed of the emitted event arguments.

      An `AbortSignal` can be used to cancel waiting on events:

      ```js
      const { on, EventEmitter } = require('events');
      const ac = new AbortController();

      (async () => {
        const ee = new EventEmitter();

        // Emit later on
        process.nextTick(() => {
          ee.emit('foo', 'bar');
          ee.emit('foo', 42);
        });

        for await (const event of on(ee, 'foo', { signal: ac.signal })) {
          // The execution of this inner block is synchronous and it
          // processes one event at a time (even with await). Do not use
          // if concurrent execution is required.
          console.log(event); // prints ['bar'] [42]
        }
        // Unreachable here
      })();

      process.nextTick(() => ac.abort());
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function on(emitter: EventEmitter, eventName: string, options?:
        StaticEventEmitterOptions)
      parameters:
        - id: emitter
          type: EventEmitter
          description: ''
        - id: eventName
          type: string
          description: The name of the event being listened for
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        type: AsyncIterableIterator&lt;any&gt;
        description: that iterates `eventName` events emitted by the `emitter`
  - name: 'on(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.on
    package: azure-storage
    summary: >-
      Adds the `listener` function to the end of the listeners array for the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.on('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependListener()` method can be used as an alternative to add
      the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.on('foo', () => console.log('a'));

      myEE.prependListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function on(eventName: string | symbol, listener: (args: any[]) => void)'
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: 'once(NodeEventTarget, string | symbol, StaticEventEmitterOptions)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.once
    package: azure-storage
    summary: >-
      Creates a `Promise` that is fulfilled when the `EventEmitter` emits the
      given

      event or that is rejected if the `EventEmitter` emits `'error'` while
      waiting.

      The `Promise` will resolve with an array of all the arguments emitted to
      the

      given event.

      This method is intentionally generic and works with the web platform
      [EventTarget](https://dom.spec.whatwg.org/#interface-eventtarget)
      interface, which has no special`'error'` event

      semantics and does not listen to the `'error'` event.


      ```js

      const { once, EventEmitter } = require('events');


      async function run() {
        const ee = new EventEmitter();

        process.nextTick(() => {
          ee.emit('myevent', 42);
        });

        const [value] = await once(ee, 'myevent');
        console.log(value);

        const err = new Error('kaboom');
        process.nextTick(() => {
          ee.emit('error', err);
        });

        try {
          await once(ee, 'myevent');
        } catch (err) {
          console.log('error happened', err);
        }
      }


      run();

      ```


      The special handling of the `'error'` event is only used when
      `events.once()`is used to wait for another event. If `events.once()` is
      used to wait for the

      '`error'` event itself, then it is treated as any other kind of event
      without

      special handling:


      ```js

      const { EventEmitter, once } = require('events');


      const ee = new EventEmitter();


      once(ee, 'error')
        .then(([err]) => console.log('ok', err.message))
        .catch((err) => console.log('error', err.message));

      ee.emit('error', new Error('boom'));


      // Prints: ok boom

      ```


      An `AbortSignal` can be used to cancel waiting for the event:


      ```js

      const { EventEmitter, once } = require('events');


      const ee = new EventEmitter();

      const ac = new AbortController();


      async function foo(emitter, event, signal) {
        try {
          await once(emitter, event, { signal });
          console.log('event emitted!');
        } catch (error) {
          if (error.name === 'AbortError') {
            console.error('Waiting for the event was canceled!');
          } else {
            console.error('There was an error', error.message);
          }
        }
      }


      foo(ee, 'foo', ac.signal);

      ac.abort(); // Abort waiting for the event

      ee.emit('foo'); // Prints: Waiting for the event was canceled!

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        static function once(emitter: NodeEventTarget, eventName: string |
        symbol, options?: StaticEventEmitterOptions)
      parameters:
        - id: emitter
          type: NodeEventTarget
          description: ''
        - id: eventName
          type: string | symbol
          description: ''
        - id: options
          type: StaticEventEmitterOptions
          description: ''
      return:
        type: 'Promise&lt;any[]&gt;'
        description: ''
  - name: 'once(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.once
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName`.
      The

      next time `eventName` is triggered, this listener is removed and then
      invoked.

      ```js

      server.once('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.


      By default, event listeners are invoked in the order they are added.
      The`emitter.prependOnceListener()` method can be used as an alternative to
      add the

      event listener to the beginning of the listeners array.


      ```js

      const myEE = new EventEmitter();

      myEE.once('foo', () => console.log('a'));

      myEE.prependOnceListener('foo', () => console.log('b'));

      myEE.emit('foo');

      // Prints:

      //   b

      //   a

      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function once(eventName: string | symbol, listener: (args: any[]) =>
        void)
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: 'prependListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.prependListener
    package: azure-storage
    summary: >-
      Adds the `listener` function to the _beginning_ of the listeners array for
      the

      event named `eventName`. No checks are made to see if the `listener` has

      already been added. Multiple calls passing the same combination of
      `eventName`and `listener` will result in the `listener` being added, and
      called, multiple

      times.

      ```js

      server.prependListener('connection', (stream) => {
        console.log('someone connected!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependListener(eventName: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: 'prependOnceListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.prependOnceListener
    package: azure-storage
    summary: >-
      Adds a **one-time**`listener` function for the event named `eventName` to
      the_beginning_ of the listeners array. The next time `eventName` is
      triggered, this

      listener is removed, and then invoked.

      ```js

      server.prependOnceListener('connection', (stream) => {
        console.log('Ah, we have our first user!');
      });

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function prependOnceListener(eventName: string | symbol, listener:
        (args: any[]) => void)
      parameters:
        - id: eventName
          type: string | symbol
          description: The name of the event.
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: |
            The callback function
      return:
        type: this
        description: ''
  - name: rawListeners(string | symbol)
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.rawListeners
    package: azure-storage
    summary: |-
      Returns a copy of the array of listeners for the event named `eventName`,
      including any wrappers (such as those created by `.once()`).
      ```js
      const emitter = new EventEmitter();
      emitter.once('log', () => console.log('log once'));

      // Returns a new Array with a function `onceWrapper` which has a property
      // `listener` which contains the original listener bound above
      const listeners = emitter.rawListeners('log');
      const logFnWrapper = listeners[0];

      // Logs "log once" to the console and does not unbind the `once` event
      logFnWrapper.listener();

      // Logs "log once" to the console and removes the listener
      logFnWrapper();

      emitter.on('log', () => console.log('log persistently'));
      // Will return a new Array with a single function bound by `.on()` above
      const newListeners = emitter.rawListeners('log');

      // Logs "log persistently" twice
      newListeners[0]();
      emitter.emit('log');
      ```
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function rawListeners(eventName: string | symbol)'
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
      return:
        type: 'Function[]'
        description: ''
  - name: removeAllListeners(string | symbol)
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.removeAllListeners
    package: azure-storage
    summary: |-
      Removes all listeners, or those of the specified `eventName`.
      It is bad practice to remove listeners added elsewhere in the code,
      particularly when the `EventEmitter` instance was created by some other
      component or module (e.g. sockets or file streams).

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function removeAllListeners(event?: string | symbol)'
      parameters:
        - id: event
          type: string | symbol
          description: ''
      return:
        type: this
        description: ''
  - name: 'removeListener(string | symbol, (args: any[]) => void)'
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.removeListener
    package: azure-storage
    summary: >-
      Removes the specified `listener` from the listener array for the event
      named`eventName`.

      ```js

      const callback = (stream) => {
        console.log('someone connected!');
      };

      server.on('connection', callback);

      // ...

      server.removeListener('connection', callback);

      ```


      `removeListener()` will remove, at most, one instance of a listener from
      the

      listener array. If any single listener has been added multiple times to
      the

      listener array for the specified `eventName`, then `removeListener()` must
      be

      called multiple times to remove each instance.


      Once an event is emitted, all listeners attached to it at the

      time of emitting are called in order. This implies that
      any`removeListener()` or `removeAllListeners()` calls _after_ emitting
      and_before_ the last listener finishes execution will

      not remove them from`emit()` in progress. Subsequent events behave as
      expected.


      ```js

      const myEmitter = new MyEmitter();


      const callbackA = () => {
        console.log('A');
        myEmitter.removeListener('event', callbackB);
      };


      const callbackB = () => {
        console.log('B');
      };


      myEmitter.on('event', callbackA);


      myEmitter.on('event', callbackB);


      // callbackA removes listener callbackB but it will still be called.

      // Internal listener array at time of emit [callbackA, callbackB]

      myEmitter.emit('event');

      // Prints:

      //   A

      //   B


      // callbackB is now removed.

      // Internal listener array [callbackA]

      myEmitter.emit('event');

      // Prints:

      //   A

      ```


      Because listeners are managed using an internal array, calling this will

      change the position indices of any listener registered _after_ the
      listener

      being removed. This will not impact the order in which listeners are
      called,

      but it means that any copies of the listener array as returned by

      the `emitter.listeners()` method will need to be recreated.


      When a single function has been added as a handler multiple times for a
      single

      event (as in the example below), `removeListener()` will remove the most

      recently added instance. In the example the `once('ping')`listener is
      removed:


      ```js

      const ee = new EventEmitter();


      function pong() {
        console.log('pong');
      }


      ee.on('ping', pong);

      ee.once('ping', pong);

      ee.removeListener('ping', pong);


      ee.emit('ping');

      ee.emit('ping');

      ```


      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: >-
        function removeListener(eventName: string | symbol, listener: (args:
        any[]) => void)
      parameters:
        - id: eventName
          type: string | symbol
          description: ''
        - id: listener
          type: '(args: any[]) =&gt; void'
          description: ''
      return:
        type: this
        description: ''
  - name: setMaxListeners(number)
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.setMaxListeners
    package: azure-storage
    summary: >-
      By default `EventEmitter`s will print a warning if more than `10`
      listeners are

      added for a particular event. This is a useful default that helps finding

      memory leaks. The `emitter.setMaxListeners()` method allows the limit to
      be

      modified for this specific `EventEmitter` instance. The value can be set
      to`Infinity` (or `0`) to indicate an unlimited number of listeners.

      Returns a reference to the `EventEmitter`, so that calls can be chained.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setMaxListeners(n: number)'
      parameters:
        - id: 'n'
          type: number
          description: ''
      return:
        type: this
        description: ''
  - name: setProxy(Proxy)
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.setProxy
    package: azure-storage
    summary: Sets proxy object specified by caller.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function setProxy(proxy: Proxy)'
      parameters:
        - id: proxy
          type: >-
            <xref
            uid="azure-storage.azurestorage.common.services.storageserviceclient.Proxy"
            />
          description: |
            proxy to use for tunneling
                                                   {
                                                    host: hostname
                                                    port: port number
                                                    proxyAuth: 'user:password' for basic auth
                                                    headers: {...} headers for proxy server
                                                    key: key for proxy server
                                                    ca: ca for proxy server
                                                    cert: cert for proxy server
                                                   }
                                                   if null or undefined, clears proxy
  - name: withFilter(IFilter)
    uid: >-
      azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient.withFilter
    package: azure-storage
    summary: >
      Associate a filtering operation with this StorageServiceClient. Filtering
      operations

      can include logging, automatically retrying, etc. Filter operations are
      objects

      that implement a method with the signature:
          "function handle (requestOptions, next)".

      After doing its preprocessing on the request options, the method needs to
      call

      "next" passing a callback with the following signature:

      signature:

          "function (returnObject, finalCallback, next)"

      In this callback, and after processing the returnObject (the response from
      the

      request to the server), the callback needs to either invoke next if it
      exists to

      continue processing other filters or simply invoke finalCallback otherwise
      to end

      up the service invocation.
    remarks: ''
    isPreview: false
    isDeprecated: false
    syntax:
      content: 'function withFilter(newFilter: IFilter)'
      parameters:
        - id: newFilter
          type: <xref uid="azure-storage.azurestorage.common.filters.IFilter" />
          description: ''
      return:
        type: >-
          <xref
          uid="azure-storage.azurestorage.common.services.storageserviceclient.StorageServiceClient"
          />
        description: A new service client with the filter applied.
extends: EventEmitter
